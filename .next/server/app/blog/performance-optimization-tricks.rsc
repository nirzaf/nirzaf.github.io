3:I[8369,[],""]
5:I[7206,[],""]
6:I[6124,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeProvider"]
7:I[1893,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],""]
8:I[6159,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","1931","static/chunks/app/page-88df9313d37b14f9.js"],"HeaderSearch"]
9:I[5727,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"MobileMenu"]
a:I[94,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeToggle"]
4:["slug","performance-optimization-tricks","d"]
0:["GpO592H_LkmWyA7BodWZx",[[["",{"children":["blog",{"children":[["slug","performance-optimization-tricks","d"],{"children":["__PAGE__?{\"slug\":\"performance-optimization-tricks\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","performance-optimization-tricks","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0b32324c4996f85d.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_d65c78 __variable_5899e0 antialiased min-h-screen flex flex-col","children":["$","$L6",null,{"children":[["$","header",null,{"className":"bg-white dark:bg-gray-900 shadow-md","children":["$","div",null,{"className":"container mx-auto px-4 py-3 flex justify-between items-center","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-12 w-16 md:h-14 md:w-20","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-xl md:text-2xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","div",null,{"className":"flex-1 mx-6 max-w-md hidden md:block","children":["$","$L8",null,{}]}],["$","div",null,{"className":"flex items-center space-x-6","children":[["$","nav",null,{"className":"hidden md:block","children":["$","ul",null,{"className":"flex space-x-8","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Home",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Blogs",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["About",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}]]}]}],["$","$L9",null,{}],["$","$La",null,{}]]}]]}]}],["$","main",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"404 - Page Not Found"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-8","children":"The page you are looking for does not exist."}],["$","div",null,{"className":"flex justify-center","children":["$","$L7",null,{"href":"/","className":"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded","data-cy":"home-link","children":"Return Home"}]}]]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"bg-white dark:bg-gray-900 py-8 mt-12 border-t border-gray-200 dark:border-gray-800","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center","children":[["$","div",null,{"className":"mb-6 md:mb-0","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity mb-4","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-10 w-14 md:h-12 md:w-16","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-lg md:text-xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mt-2","children":"Â© 2025 .NET Evangelist. All rights reserved."}]]}],["$","div",null,{"className":"grid grid-cols-2 gap-x-8 gap-y-4","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Navigation"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Blogs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Connect"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"}]}],"Twitter"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}],"GitHub"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"}]}],"LinkedIn"]}]}]]}]]}]]}]]}]}]}]]}]}]}]],null],null],["$Lb",null]]]]
c:I[2364,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"BlogContent"]
e:I[231,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"Image"]
d:T2cea,{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Performance optimization is a critical aspect of developing robust and efficient applications, especially when working with a data access framework like Entity Framework Core (EF Core) in conjunction with the powerful .NET 8 platform.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we will explore some performance optimization tricks and tips with EF Core and demonstrate their application in a real-time example using an accounting application scenario.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before diving into the optimization techniques, let's briefly understand EF Core and its relevance in the .NET ecosystem. EF Core is a lightweight, extensible, and cross-platform version of Entity Framework, a popular Object-Relational Mapping (ORM) framework for .NET. It simplifies data access by providing a high-level API for querying and manipulating databases.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now, let's consider an accounting application scenario where we have entities such as \", _jsx(_components.code, {\n        children: \"Account\"\n      }), \", \", _jsx(_components.code, {\n        children: \"Transaction\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"User\"\n      }), \". Each Account can have multiple Transaction records associated with it, and each Transaction is linked to a User. Our goal is to optimize the performance of data retrieval and manipulation operations in this scenario.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. Use AsNoTracking()\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"One of the simplest yet effective techniques to improve performance is using the \", _jsx(_components.code, {\n        children: \"AsNoTracking()\"\n      }), \" method. By default, EF Core tracks changes to entities in memory for change tracking purposes. However, if you only need to read data without modifying it, calling \", _jsx(_components.code, {\n        children: \"AsNoTracking()\"\n      }), \" eliminates the overhead of change tracking. For example, when fetching a list of accounts, you can use:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"var accounts = context.Accounts.AsNoTracking().ToList();\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. Select Required Columns\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fetching all columns of an entity when you only need a subset of them can impact performance, especially when dealing with large datasets. Instead, use the \", _jsx(_components.code, {\n        children: \"Select\"\n      }), \" method to fetch only the required columns. For instance, if you need the account name and balance, you can write:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"var accounts = context.Accounts.Select(a => new { a.Name, a.Balance }).ToList();\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. Paging with Skip and Take\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When dealing with large datasets, fetching all records at once can lead to performance issues and increased memory consumption. Instead, use paging techniques with \", _jsx(_components.code, {\n        children: \"Skip\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"Take\"\n      }), \" to fetch data in smaller chunks. This approach is particularly useful for scenarios where you need to display data in paginated views. For example:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"var pageSize = 10;\\nvar pageNumber = 1;\\nvar transactions = dbContext.Transactions\\n.OrderByDescending(t => t.TransactionDate)\\n.Skip((pageNumber - 1) * pageSize)\\n.Take(pageSize)\\n.ToList();\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. Eager Loading with Include\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, EF Core uses lazy loading, which means related entities are loaded on-demand when accessed. However, lazy loading can result in the N+1 query problem, where a separate query is executed for each entity, leading to performance degradation. To mitigate this, use eager loading with the \", _jsx(_components.code, {\n        children: \"Include\"\n      }), \" method to fetch related entities upfront. For example:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"var accounts = dbContext.Accounts\\n.Include(a => a.Transactions)\\n.ToList();\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"5. Raw SQL Queries\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In certain scenarios, when complex queries or performance optimization is crucial, EF Core allows executing raw SQL queries. Raw SQL queries provide full control over the query structure and can be highly efficient. However, be cautious about SQL injection vulnerabilities and ensure proper parameterization. Here's an example:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"var accountId = 1;\\nvar query = @\\\"SELECT * FROM Transactions WHERE AccountId = \", 0, \"\\\";\\nvar transactions = dbContext.Transactions.FromSqlRaw(query, accountId).ToList();\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These performance optimization techniques can significantly enhance the speed and efficiency of your accounting application. However, it's essential to measure and profile the performance improvements to ensure they are effective. Now, let's explore additional tips and best practices to optimize EF Core performance in the context of our accounting application scenario.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"6. Indexing\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Indexing plays a crucial role in enhancing query performance. Analyze the queries executed against your database and identify frequently accessed columns. Then, create appropriate indexes to speed up the retrieval of data. In our scenario, you might consider indexing columns like \", _jsx(_components.code, {\n        children: \"AccountId\"\n      }), \" in the \", _jsx(_components.code, {\n        children: \"Transactions\"\n      }), \" table for faster filtering based on account.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"7. Batch Updates and Inserts\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When dealing with bulk updates or inserts, EF Core can incur significant performance overhead due to individual database round-trips for each entity. To optimize this, EF Core provides the \", _jsx(_components.code, {\n        children: \"AddRange\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"UpdateRange\"\n      }), \" methods to perform batch operations, reducing the number of round-trips. For example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"var transactions = new List<Transaction> { /* list of transactions */ };\\ndbContext.Transactions.AddRange(transactions);\\ndbContext.SaveChanges();\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"8. Use Stored Procedures\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"EF Core supports executing stored procedures using the \", _jsx(_components.code, {\n        children: \"FromSqlRaw\"\n      }), \" method. Stored procedures can be highly efficient and can be used for complex queries or scenarios where performance is critical. For example:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"var accountId = 1;\\nvar transactions = dbContext.Transactions\\n.FromSqlRaw(\\\"EXECUTE dbo.GetTransactionsByAccount \", 0, \"\\\", accountId)\\n.ToList();\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"9. Use Compiled Queries\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"EF Core allows compiling queries to improve performance. The compiled queries are cached and reused, eliminating the need for recompilation. For example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"var query = dbContext.Transactions\\n    .Where(t => t.AccountId == 1)\\n    .OrderByDescending(t => t.TransactionDate)\\n    .Select(t => new { t.Id, t.Amount })\\n    .Compile();\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"10. Profiling and Monitoring\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It's essential to profile and monitor the performance of your application to identify bottlenecks and optimize them. EF Core provides a built-in logging mechanism that can be used to log queries and their execution time. You can also use third-party tools like MiniProfiler to profile and monitor your application.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In conclusion, optimizing performance in an accounting application scenario requires a combination of techniques at both the EF Core and database levels. By leveraging EF Core's features, such as \", _jsx(_components.code, {\n        children: \"AsNoTracking()\"\n      }), \", eager loading, and compiled queries, along with database-level optimizations like indexing and batch operations, you can significantly enhance the performance of your application. Remember to profile and monitor your application continuously to identify areas for improvement and ensure optimal performance throughout its lifecycle.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"References\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.youtube.com/watch?v=TqC7USVOoxQ\",\n          children: \"Performance Optimization Tricks and Tips With EF Core & .NET 8\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: \"https://www.youtube.com/embed/TqC7USVOoxQ\",\n      title: \"YouTube video player\",\n      frameBorder: \"0\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n      allowFullScreen: true\n    }), \"\\n\", _jsx(_components.hr, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}2:["$","article",null,{"className":"container mx-auto px-4 py-8 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4","children":[["$","span",null,{"children":"2023-05-23"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["5"," min read"]}]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"Performance Optimization Tricks and Tips With EF Core & .NET 8"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-6","children":"Learn performance optimization techniques for Entity Framework Core with .NET 7 using real-time examples."}],["$","div",null,{"className":"aspect-video relative overflow-hidden rounded-lg mb-8","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Asynchronous_Programming_With_Async_Await_Task_In_CSharp.jpg?updatedAt=1746813313287","alt":"Performance Optimization Tricks and Tips With EF Core & .NET 8","className":"object-cover w-full h-full"}]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-8","children":[["$","$L7","Entity Framework Core",{"href":"/tags/Entity Framework Core","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Entity Framework Core"]}],["$","$L7","Performance Optimization",{"href":"/tags/Performance Optimization","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Performance Optimization"]}]]}]]}],["$","$Lc",null,{"content":"$d"}],["$","div",null,{"className":"mt-12 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Share this post"}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"https://twitter.com/intent/tweet?text=Performance%20Optimization%20Tricks%20and%20Tips%20With%20EF%20Core%20%26%20.NET%208&url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fperformance-optimization-tricks","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center","children":"Twitter"}],["$","a",null,{"href":"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fperformance-optimization-tricks","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded flex items-center","children":"Facebook"}],["$","a",null,{"href":"https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fperformance-optimization-tricks","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center","children":"LinkedIn"}]]}]]}],["$","div",null,{"className":"mt-16 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Related Articles"}],["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-6","children":[["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/soft_delete_with_entity_framework_core.jpg?updatedAt=1746813294522","alt":"Implementing Soft Delete in .NET with Entity Framework Core","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Oct 2, 2024"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["5"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/how-to-implement-soft-delete-with-entity-framwork-core","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Implementing Soft Delete in .NET with Entity Framework Core"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Learn how to implement soft delete functionality in your .NET applications using Entity Framework Core, improving data management and recoverability."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}],["$","$L7","Efcore",{"href":"/tags/Efcore","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Efcore"]}],["$","$L7","Softdelete",{"href":"/tags/Softdelete","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Softdelete"]}],["$","$L7","Database",{"href":"/tags/Database","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Database"]}],["$","$L7","Crud",{"href":"/tags/Crud","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Crud"]}]]}]]}]]}],["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/ai-prompt-engineering-course-in-minutes.jpg?updatedAt=1746813307215","alt":"Google's 9-Hour AI Prompt Engineering Course in 10 Minutes","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Dec 10, 2024"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["9"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/google-9-hour-ai-prompt-engineering-course-in-10-minutes","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Google's 9-Hour AI Prompt Engineering Course in 10 Minutes"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"A concise summary of Google's comprehensive AI Prompt Engineering Course, distilled into a 10-minute read."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Ai",{"href":"/tags/Ai","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Ai"]}],["$","$L7","Prompt Engineering",{"href":"/tags/Prompt Engineering","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Prompt Engineering"]}],["$","$L7","Google",{"href":"/tags/Google","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Google"]}],["$","$L7","Programming",{"href":"/tags/Programming","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Programming"]}]]}]]}]]}]]}]]}]]}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Performance Optimization Tricks and Tips With EF Core & .NET 8 | .NET Evangelist"}],["$","meta","3",{"name":"description","content":"Learn performance optimization techniques for Entity Framework Core with .NET 7 using real-time examples."}],["$","meta","4",{"property":"og:title","content":"Performance Optimization Tricks and Tips With EF Core & .NET 8"}],["$","meta","5",{"property":"og:description","content":"Learn performance optimization techniques for Entity Framework Core with .NET 7 using real-time examples."}],["$","meta","6",{"property":"og:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Asynchronous_Programming_With_Async_Await_Task_In_CSharp.jpg?updatedAt=1746813313287"}],["$","meta","7",{"property":"og:type","content":"article"}],["$","meta","8",{"property":"article:published_time","content":"2023-05-23"}],["$","meta","9",{"property":"article:author","content":"Your Name"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"Performance Optimization Tricks and Tips With EF Core & .NET 8"}],["$","meta","12",{"name":"twitter:description","content":"Learn performance optimization techniques for Entity Framework Core with .NET 7 using real-time examples."}],["$","meta","13",{"name":"twitter:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Asynchronous_Programming_With_Async_Await_Task_In_CSharp.jpg?updatedAt=1746813313287"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","15",{"name":"next-size-adjust"}]]
1:null
