3:I[8369,[],""]
5:I[7206,[],""]
6:I[6124,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeProvider"]
7:I[1893,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],""]
8:I[6159,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","1931","static/chunks/app/page-88df9313d37b14f9.js"],"HeaderSearch"]
9:I[5727,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"MobileMenu"]
a:I[94,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeToggle"]
4:["slug","angular-with-dotnet-core-api","d"]
0:["GpO592H_LkmWyA7BodWZx",[[["",{"children":["blog",{"children":[["slug","angular-with-dotnet-core-api","d"],{"children":["__PAGE__?{\"slug\":\"angular-with-dotnet-core-api\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","angular-with-dotnet-core-api","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0b32324c4996f85d.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_d65c78 __variable_5899e0 antialiased min-h-screen flex flex-col","children":["$","$L6",null,{"children":[["$","header",null,{"className":"bg-white dark:bg-gray-900 shadow-md","children":["$","div",null,{"className":"container mx-auto px-4 py-3 flex justify-between items-center","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-12 w-16 md:h-14 md:w-20","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-xl md:text-2xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","div",null,{"className":"flex-1 mx-6 max-w-md hidden md:block","children":["$","$L8",null,{}]}],["$","div",null,{"className":"flex items-center space-x-6","children":[["$","nav",null,{"className":"hidden md:block","children":["$","ul",null,{"className":"flex space-x-8","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Home",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Blogs",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["About",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}]]}]}],["$","$L9",null,{}],["$","$La",null,{}]]}]]}]}],["$","main",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"404 - Page Not Found"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-8","children":"The page you are looking for does not exist."}],["$","div",null,{"className":"flex justify-center","children":["$","$L7",null,{"href":"/","className":"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded","data-cy":"home-link","children":"Return Home"}]}]]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"bg-white dark:bg-gray-900 py-8 mt-12 border-t border-gray-200 dark:border-gray-800","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center","children":[["$","div",null,{"className":"mb-6 md:mb-0","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity mb-4","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-10 w-14 md:h-12 md:w-16","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-lg md:text-xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mt-2","children":"Â© 2025 .NET Evangelist. All rights reserved."}]]}],["$","div",null,{"className":"grid grid-cols-2 gap-x-8 gap-y-4","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Navigation"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Blogs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Connect"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"}]}],"Twitter"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}],"GitHub"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"}]}],"LinkedIn"]}]}]]}]]}]]}]]}]}]}]]}]}]}]],null],null],["$Lb",null]]]]
c:I[2364,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"BlogContent"]
e:I[231,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"Image"]
d:T2bfc,{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Angular 18 and .NET Core API Authorization\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Building secure web applications requires proper authorization between frontend and backend systems. In this post, we'll explore how to implement robust authorization between an Angular 18 frontend and a .NET Core API backend.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setting Up the .NET Core API\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, let's set up our .NET Core API with JWT authentication:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"// Startup.cs\\npublic void ConfigureServices(IServiceCollection services)\\n{\\n    // Add JWT Authentication\\n    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\\n        .AddJwtBearer(options =>\\n        {\\n            options.TokenValidationParameters = new TokenValidationParameters\\n            {\\n                ValidateIssuer = true,\\n                ValidateAudience = true,\\n                ValidateLifetime = true,\\n                ValidateIssuerSigningKey = true,\\n                ValidIssuer = Configuration[\\\"Jwt:Issuer\\\"],\\n                ValidAudience = Configuration[\\\"Jwt:Audience\\\"],\\n                IssuerSigningKey = new SymmetricSecurityKey(\\n                    Encoding.UTF8.GetBytes(Configuration[\\\"Jwt:Key\\\"]))\\n            };\\n        });\\n\\n    // Add Authorization\\n    services.AddAuthorization(options =>\\n    {\\n        options.AddPolicy(\\\"AdminOnly\\\", policy => policy.RequireRole(\\\"Admin\\\"));\\n        options.AddPolicy(\\\"UserAccess\\\", policy => policy.RequireRole(\\\"User\\\", \\\"Admin\\\"));\\n    });\\n\\n    services.AddControllers();\\n}\\n\\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\\n{\\n    // Other middleware...\\n    \\n    app.UseAuthentication();\\n    app.UseAuthorization();\\n    \\n    // Other middleware...\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Creating a JWT Token Service\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next, let's create a service to generate JWT tokens:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public class TokenService : ITokenService\\n{\\n    private readonly IConfiguration _configuration;\\n    \\n    public TokenService(IConfiguration configuration)\\n    {\\n        _configuration = configuration;\\n    }\\n    \\n    public string GenerateJwtToken(User user)\\n    {\\n        var claims = new List<Claim>\\n        {\\n            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\\n            new Claim(ClaimTypes.Name, user.Username),\\n            new Claim(ClaimTypes.Email, user.Email)\\n        };\\n        \\n        // Add roles as claims\\n        foreach (var role in user.Roles)\\n        {\\n            claims.Add(new Claim(ClaimTypes.Role, role));\\n        }\\n        \\n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[\\\"Jwt:Key\\\"]));\\n        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\\n        \\n        var token = new JwtSecurityToken(\\n            issuer: _configuration[\\\"Jwt:Issuer\\\"],\\n            audience: _configuration[\\\"Jwt:Audience\\\"],\\n            claims: claims,\\n            expires: DateTime.Now.AddDays(1),\\n            signingCredentials: creds\\n        );\\n        \\n        return new JwtSecurityTokenHandler().WriteToken(token);\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Implementing Protected API Endpoints\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, let's create some protected API endpoints:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"[ApiController]\\n[Route(\\\"api/[controller]\\\")]\\npublic class ResourcesController : ControllerBase\\n{\\n    [HttpGet(\\\"public\\\")]\\n    public IActionResult GetPublicData()\\n    {\\n        return Ok(new { message = \\\"This is public data\\\" });\\n    }\\n    \\n    [HttpGet(\\\"user\\\")]\\n    [Authorize(Policy = \\\"UserAccess\\\")]\\n    public IActionResult GetUserData()\\n    {\\n        return Ok(new { message = \\\"This is protected user data\\\" });\\n    }\\n    \\n    [HttpGet(\\\"admin\\\")]\\n    [Authorize(Policy = \\\"AdminOnly\\\")]\\n    public IActionResult GetAdminData()\\n    {\\n        return Ok(new { message = \\\"This is protected admin data\\\" });\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setting Up Angular 18 Authentication\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"On the Angular side, we need to set up authentication and handle JWT tokens:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript\",\n        children: \"// auth.service.ts\\n@Injectable({\\n  providedIn: 'root'\\n})\\nexport class AuthService {\\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\\n  public currentUser$ = this.currentUserSubject.asObservable();\\n  \\n  constructor(private http: HttpClient) {\\n    // Check if we have a token in local storage\\n    const token = localStorage.getItem('token');\\n    if (token) {\\n      const user = this.getUserFromToken(token);\\n      this.currentUserSubject.next(user);\\n    }\\n  }\\n  \\n  login(username: string, password: string): Observable<any> {\\n    return this.http.post<any>(`${environment.apiUrl}/auth/login`, { username, password })\\n      .pipe(\\n        tap(response => {\\n          // Save token to local storage\\n          localStorage.setItem('token', response.token);\\n          \\n          // Update current user\\n          const user = this.getUserFromToken(response.token);\\n          this.currentUserSubject.next(user);\\n        })\\n      );\\n  }\\n  \\n  logout(): void {\\n    localStorage.removeItem('token');\\n    this.currentUserSubject.next(null);\\n  }\\n  \\n  getToken(): string | null {\\n    return localStorage.getItem('token');\\n  }\\n  \\n  isLoggedIn(): boolean {\\n    return !!this.getToken();\\n  }\\n  \\n  hasRole(role: string): boolean {\\n    const user = this.currentUserSubject.value;\\n    return user?.roles.includes(role) ?? false;\\n  }\\n  \\n  private getUserFromToken(token: string): User | null {\\n    try {\\n      // Decode the JWT token\\n      const decodedToken = jwt_decode(token);\\n      \\n      return {\\n        id: decodedToken.nameid,\\n        username: decodedToken.unique_name,\\n        email: decodedToken.email,\\n        roles: Array.isArray(decodedToken.role) ? decodedToken.role : [decodedToken.role]\\n      };\\n    } catch (error) {\\n      console.error('Error decoding token', error);\\n      return null;\\n    }\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Adding HTTP Interceptor for JWT\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We'll add an HTTP interceptor to automatically add the JWT token to outgoing requests:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript\",\n        children: \"// auth.interceptor.ts\\n@Injectable()\\nexport class AuthInterceptor implements HttpInterceptor {\\n  constructor(private authService: AuthService) {}\\n  \\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\\n    const token = this.authService.getToken();\\n    \\n    if (token) {\\n      const cloned = req.clone({\\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\\n      });\\n      \\n      return next.handle(cloned);\\n    }\\n    \\n    return next.handle(req);\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Implementing Route Guards\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Finally, let's implement route guards to protect Angular routes:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript\",\n        children: \"// auth.guard.ts\\n@Injectable({\\n  providedIn: 'root'\\n})\\nexport class AuthGuard implements CanActivate {\\n  constructor(\\n    private authService: AuthService,\\n    private router: Router\\n  ) {}\\n  \\n  canActivate(\\n    route: ActivatedRouteSnapshot,\\n    state: RouterStateSnapshot\\n  ): boolean | UrlTree {\\n    if (this.authService.isLoggedIn()) {\\n      // Check if route has data.roles and user has required role\\n      const requiredRoles = route.data['roles'] as string[];\\n      \\n      if (!requiredRoles || requiredRoles.length === 0) {\\n        return true;\\n      }\\n      \\n      // Check if user has any of the required roles\\n      const hasRequiredRole = requiredRoles.some(role => \\n        this.authService.hasRole(role)\\n      );\\n      \\n      if (hasRequiredRole) {\\n        return true;\\n      }\\n      \\n      // User doesn't have required role, redirect to unauthorized page\\n      return this.router.parseUrl('/unauthorized');\\n    }\\n    \\n    // Not logged in, redirect to login page with return url\\n    return this.router.parseUrl(\\n      `/login?returnUrl=${encodeURIComponent(state.url)}`\\n    );\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By implementing proper authorization between your Angular 18 frontend and .NET Core API backend, you can ensure that your application's resources are protected and only accessible to authorized users. This approach uses industry-standard JWT tokens and role-based access control to provide a secure and scalable authorization system.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In future posts, we'll explore more advanced security features like refresh tokens, multi-factor authentication, and API rate limiting.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Happy coding!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}2:["$","article",null,{"className":"container mx-auto px-4 py-8 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4","children":[["$","span",null,{"children":"$undefined"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["4"," min read"]}]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"Angular 18 and .NET Core API Authorization"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-6","children":"Learn how to implement secure authorization between an Angular 18 frontend and a .NET Core API backend using JWT tokens and role-based access control."}],["$","div",null,{"className":"aspect-video relative overflow-hidden rounded-lg mb-8","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Angular_18_and_NET_Core_API_Authorization.jpg?updatedAt=1746813313487","alt":"Angular 18 and .NET Core API Authorization","className":"object-cover w-full h-full"}]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-8","children":[["$","$L7","Angular",{"href":"/tags/Angular","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Angular"]}],["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}],["$","$L7","Api",{"href":"/tags/Api","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Api"]}],["$","$L7","Authorization",{"href":"/tags/Authorization","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Authorization"]}],["$","$L7","Security",{"href":"/tags/Security","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Security"]}]]}]]}],["$","$Lc",null,{"content":"$d"}],["$","div",null,{"className":"mt-12 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Share this post"}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"https://twitter.com/intent/tweet?text=Angular%2018%20and%20.NET%20Core%20API%20Authorization&url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fangular-with-dotnet-core-api","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center","children":"Twitter"}],["$","a",null,{"href":"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fangular-with-dotnet-core-api","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded flex items-center","children":"Facebook"}],["$","a",null,{"href":"https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fangular-with-dotnet-core-api","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center","children":"LinkedIn"}]]}]]}],["$","div",null,{"className":"mt-16 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Related Articles"}],["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-6","children":[["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/mastering-advanced-features-in-net.png?updatedAt=1746984226226","alt":"Beyond the Basics: Mastering Advanced Features in .NET","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Jan 11, 2025"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["4"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/beyond-the-basics-mastering-advanced-features-in-dotnet","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Beyond the Basics: Mastering Advanced Features in .NET"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Explore advanced .NET features such as reflection, dependency injection, asynchronous programming, and performance optimization to elevate your development skills."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}],["$","$L7","Advanced",{"href":"/tags/Advanced","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Advanced"]}],["$","$L7","Reflection",{"href":"/tags/Reflection","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Reflection"]}],["$","$L7","Dependency Injection",{"href":"/tags/Dependency Injection","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dependency Injection"]}],["$","$L7","Async",{"href":"/tags/Async","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Async"]}],["$","$L7","Performance",{"href":"/tags/Performance","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Performance"]}]]}]]}]]}],["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/long-time-running-tasks.png?updatedAt=1746822507906","alt":"Implementing Long-Running Background Tasks in ASP.NET Core","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Oct 26, 2024"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["4"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/implementing-long-running-background-tasks-in-aspnet-core","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Implementing Long-Running Background Tasks in ASP.NET Core"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Learn how to implement long-running background tasks in ASP.NET Core using hosted services and background workers."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Aspnetcore",{"href":"/tags/Aspnetcore","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Aspnetcore"]}],["$","$L7","Background Tasks",{"href":"/tags/Background Tasks","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Background Tasks"]}],["$","$L7","Hosted Services",{"href":"/tags/Hosted Services","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Hosted Services"]}],["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}]]}]]}]]}]]}]]}]]}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Angular 18 and .NET Core API Authorization | .NET Evangelist"}],["$","meta","3",{"name":"description","content":"Learn how to implement secure authorization between an Angular 18 frontend and a .NET Core API backend using JWT tokens and role-based access control."}],["$","meta","4",{"property":"og:title","content":"Angular 18 and .NET Core API Authorization"}],["$","meta","5",{"property":"og:description","content":"Learn how to implement secure authorization between an Angular 18 frontend and a .NET Core API backend using JWT tokens and role-based access control."}],["$","meta","6",{"property":"og:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Angular_18_and_NET_Core_API_Authorization.jpg?updatedAt=1746813313487"}],["$","meta","7",{"property":"og:type","content":"article"}],["$","meta","8",{"property":"article:author","content":"Your Name"}],["$","meta","9",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","10",{"name":"twitter:title","content":"Angular 18 and .NET Core API Authorization"}],["$","meta","11",{"name":"twitter:description","content":"Learn how to implement secure authorization between an Angular 18 frontend and a .NET Core API backend using JWT tokens and role-based access control."}],["$","meta","12",{"name":"twitter:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Angular_18_and_NET_Core_API_Authorization.jpg?updatedAt=1746813313487"}],["$","link","13",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","14",{"name":"next-size-adjust"}]]
1:null
