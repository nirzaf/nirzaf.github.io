3:I[8369,[],""]
5:I[7206,[],""]
6:I[6124,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeProvider"]
7:I[1893,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],""]
8:I[6159,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","1931","static/chunks/app/page-88df9313d37b14f9.js"],"HeaderSearch"]
9:I[5727,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"MobileMenu"]
a:I[94,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeToggle"]
4:["slug","implementing-repository-pattern","d"]
0:["GpO592H_LkmWyA7BodWZx",[[["",{"children":["blog",{"children":[["slug","implementing-repository-pattern","d"],{"children":["__PAGE__?{\"slug\":\"implementing-repository-pattern\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","implementing-repository-pattern","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0b32324c4996f85d.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_d65c78 __variable_5899e0 antialiased min-h-screen flex flex-col","children":["$","$L6",null,{"children":[["$","header",null,{"className":"bg-white dark:bg-gray-900 shadow-md","children":["$","div",null,{"className":"container mx-auto px-4 py-3 flex justify-between items-center","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-12 w-16 md:h-14 md:w-20","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-xl md:text-2xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","div",null,{"className":"flex-1 mx-6 max-w-md hidden md:block","children":["$","$L8",null,{}]}],["$","div",null,{"className":"flex items-center space-x-6","children":[["$","nav",null,{"className":"hidden md:block","children":["$","ul",null,{"className":"flex space-x-8","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Home",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Blogs",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["About",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}]]}]}],["$","$L9",null,{}],["$","$La",null,{}]]}]]}]}],["$","main",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"404 - Page Not Found"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-8","children":"The page you are looking for does not exist."}],["$","div",null,{"className":"flex justify-center","children":["$","$L7",null,{"href":"/","className":"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded","data-cy":"home-link","children":"Return Home"}]}]]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"bg-white dark:bg-gray-900 py-8 mt-12 border-t border-gray-200 dark:border-gray-800","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center","children":[["$","div",null,{"className":"mb-6 md:mb-0","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity mb-4","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-10 w-14 md:h-12 md:w-16","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-lg md:text-xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mt-2","children":"Â© 2025 .NET Evangelist. All rights reserved."}]]}],["$","div",null,{"className":"grid grid-cols-2 gap-x-8 gap-y-4","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Navigation"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Blogs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Connect"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"}]}],"Twitter"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}],"GitHub"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"}]}],"LinkedIn"]}]}]]}]]}]]}]]}]}]}]]}]}]}]],null],null],["$Lb",null]]]]
c:I[2364,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"BlogContent"]
e:I[231,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"Image"]
d:T30df,{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"The Repository Pattern is one of the most valuable design patterns for creating maintainable and testable .NET applications. It provides a clean separation between your data access logic and business logic, making your code more modular and easier to maintain.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"What is the Repository Pattern?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Repository Pattern is an abstraction that isolates the data layer from the rest of the application. It mediates between the domain and data mapping layers, acting like an in-memory collection of domain objects.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Key benefits include:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Separation of concerns\"\n        }), \": Business logic is separated from data access logic\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Improved testability\"\n        }), \": Easier to unit test business logic by mocking repositories\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Centralized data access logic\"\n        }), \": Reduces duplication of query logic\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Flexibility\"\n        }), \": Easier to switch between different data sources or ORMs\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Basic Implementation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's start with a basic implementation of the Repository Pattern in a .NET application:\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"1. Define the Entity\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public class Customer\\n{\\n    public int Id { get; set; }\\n    public string Name { get; set; }\\n    public string Email { get; set; }\\n    public DateTime CreatedAt { get; set; }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"2. Create the Repository Interface\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public interface IRepository<T> where T : class\\n{\\n    IEnumerable<T> GetAll();\\n    T GetById(int id);\\n    void Add(T entity);\\n    void Update(T entity);\\n    void Delete(T entity);\\n    void SaveChanges();\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"3. Implement the Generic Repository\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public class Repository<T> : IRepository<T> where T : class\\n{\\n    protected readonly DbContext _context;\\n    protected readonly DbSet<T> _dbSet;\\n\\n    public Repository(DbContext context)\\n    {\\n        _context = context;\\n        _dbSet = context.Set<T>();\\n    }\\n\\n    public virtual IEnumerable<T> GetAll()\\n    {\\n        return _dbSet.ToList();\\n    }\\n\\n    public virtual T GetById(int id)\\n    {\\n        return _dbSet.Find(id);\\n    }\\n\\n    public virtual void Add(T entity)\\n    {\\n        _dbSet.Add(entity);\\n    }\\n\\n    public virtual void Update(T entity)\\n    {\\n        _dbSet.Attach(entity);\\n        _context.Entry(entity).State = EntityState.Modified;\\n    }\\n\\n    public virtual void Delete(T entity)\\n    {\\n        if (_context.Entry(entity).State == EntityState.Detached)\\n        {\\n            _dbSet.Attach(entity);\\n        }\\n        _dbSet.Remove(entity);\\n    }\\n\\n    public void SaveChanges()\\n    {\\n        _context.SaveChanges();\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"4. Create Specific Repository (Optional)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For specific entities, you might want to extend the generic repository with custom methods:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public interface ICustomerRepository : IRepository<Customer>\\n{\\n    IEnumerable<Customer> GetPremiumCustomers();\\n    Customer GetByEmail(string email);\\n}\\n\\npublic class CustomerRepository : Repository<Customer>, ICustomerRepository\\n{\\n    public CustomerRepository(DbContext context) : base(context)\\n    {\\n    }\\n\\n    public IEnumerable<Customer> GetPremiumCustomers()\\n    {\\n        return _dbSet.Where(c => c.IsPremium).ToList();\\n    }\\n\\n    public Customer GetByEmail(string email)\\n    {\\n        return _dbSet.FirstOrDefault(c => c.Email == email);\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Using the Repository in Services\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, let's see how to use the repository in a service class:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public class CustomerService\\n{\\n    private readonly ICustomerRepository _customerRepository;\\n\\n    public CustomerService(ICustomerRepository customerRepository)\\n    {\\n        _customerRepository = customerRepository;\\n    }\\n\\n    public void RegisterCustomer(string name, string email)\\n    {\\n        // Check if customer already exists\\n        var existingCustomer = _customerRepository.GetByEmail(email);\\n        if (existingCustomer != null)\\n        {\\n            throw new InvalidOperationException(\\\"Customer with this email already exists\\\");\\n        }\\n\\n        // Create new customer\\n        var customer = new Customer\\n        {\\n            Name = name,\\n            Email = email,\\n            CreatedAt = DateTime.UtcNow\\n        };\\n\\n        // Add to repository\\n        _customerRepository.Add(customer);\\n        _customerRepository.SaveChanges();\\n    }\\n\\n    public IEnumerable<Customer> GetAllCustomers()\\n    {\\n        return _customerRepository.GetAll();\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Dependency Injection Setup\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In ASP.NET Core, you can register your repositories in the \", _jsx(_components.code, {\n        children: \"Startup.cs\"\n      }), \" file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public void ConfigureServices(IServiceCollection services)\\n{\\n    // Register DbContext\\n    services.AddDbContext<ApplicationDbContext>(options =>\\n        options.UseSqlServer(Configuration.GetConnectionString(\\\"DefaultConnection\\\")));\\n\\n    // Register repositories\\n    services.AddScoped(typeof(IRepository<>), typeof(Repository<>));\\n    services.AddScoped<ICustomerRepository, CustomerRepository>();\\n\\n    // Register services\\n    services.AddScoped<CustomerService>();\\n\\n    // Other service registrations...\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Unit Testing with Mocked Repositories\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"One of the biggest advantages of the Repository Pattern is improved testability. Here's an example of how to unit test the \", _jsx(_components.code, {\n        children: \"CustomerService\"\n      }), \" using a mocked repository:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"[Fact]\\npublic void RegisterCustomer_WithNewEmail_ShouldAddCustomer()\\n{\\n    // Arrange\\n    var mockRepo = new Mock<ICustomerRepository>();\\n    mockRepo.Setup(repo => repo.GetByEmail(It.IsAny<string>()))\\n        .Returns((Customer)null);\\n\\n    var service = new CustomerService(mockRepo.Object);\\n    \\n    // Act\\n    service.RegisterCustomer(\\\"John Doe\\\", \\\"john@example.com\\\");\\n    \\n    // Assert\\n    mockRepo.Verify(repo => repo.Add(It.Is<Customer>(c => \\n        c.Name == \\\"John Doe\\\" && \\n        c.Email == \\\"john@example.com\\\")), Times.Once);\\n    mockRepo.Verify(repo => repo.SaveChanges(), Times.Once);\\n}\\n\\n[Fact]\\npublic void RegisterCustomer_WithExistingEmail_ShouldThrowException()\\n{\\n    // Arrange\\n    var existingCustomer = new Customer\\n    {\\n        Id = 1,\\n        Name = \\\"Existing User\\\",\\n        Email = \\\"existing@example.com\\\"\\n    };\\n    \\n    var mockRepo = new Mock<ICustomerRepository>();\\n    mockRepo.Setup(repo => repo.GetByEmail(\\\"existing@example.com\\\"))\\n        .Returns(existingCustomer);\\n\\n    var service = new CustomerService(mockRepo.Object);\\n    \\n    // Act & Assert\\n    Assert.Throws<InvalidOperationException>(() => \\n        service.RegisterCustomer(\\\"New User\\\", \\\"existing@example.com\\\"));\\n    \\n    mockRepo.Verify(repo => repo.Add(It.IsAny<Customer>()), Times.Never);\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Advanced Patterns\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For more complex applications, consider these advanced patterns:\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Unit of Work Pattern\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Unit of Work pattern can be combined with the Repository Pattern to manage transactions across multiple repositories:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public interface IUnitOfWork : IDisposable\\n{\\n    ICustomerRepository Customers { get; }\\n    IOrderRepository Orders { get; }\\n    int Complete();\\n}\\n\\npublic class UnitOfWork : IUnitOfWork\\n{\\n    private readonly ApplicationDbContext _context;\\n    \\n    public ICustomerRepository Customers { get; private set; }\\n    public IOrderRepository Orders { get; private set; }\\n    \\n    public UnitOfWork(ApplicationDbContext context)\\n    {\\n        _context = context;\\n        Customers = new CustomerRepository(_context);\\n        Orders = new OrderRepository(_context);\\n    }\\n    \\n    public int Complete()\\n    {\\n        return _context.SaveChanges();\\n    }\\n    \\n    public void Dispose()\\n    {\\n        _context.Dispose();\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Repository Pattern is a powerful tool for creating clean, maintainable, and testable .NET applications. By abstracting data access logic, it allows you to focus on business logic without worrying about the underlying data storage mechanisms.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While it does add some complexity to your codebase, the benefits in terms of separation of concerns, testability, and maintainability make it well worth considering for medium to large-scale applications.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Happy coding!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}2:["$","article",null,{"className":"container mx-auto px-4 py-8 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4","children":[["$","span",null,{"children":"2023-08-05"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["5"," min read"]}]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"Implementing the Repository Pattern in .NET - A Game Changer for Clean Code"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-6","children":"Learn how to implement the Repository Pattern in .NET applications to achieve better separation of concerns, testability, and maintainability in your codebase."}],["$","div",null,{"className":"aspect-video relative overflow-hidden rounded-lg mb-8","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Implementing-the-Repository-Pattern-in-NET-A-Game-Changer-for-Clean-Code.jpg?updatedAt=1746813308058","alt":"Implementing the Repository Pattern in .NET - A Game Changer for Clean Code","className":"object-cover w-full h-full"}]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-8","children":[["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}],["$","$L7","Design-patterns",{"href":"/tags/Design-patterns","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Design-patterns"]}],["$","$L7","Clean-code",{"href":"/tags/Clean-code","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Clean-code"]}],["$","$L7","Architecture",{"href":"/tags/Architecture","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Architecture"]}]]}]]}],["$","$Lc",null,{"content":"$d"}],["$","div",null,{"className":"mt-12 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Share this post"}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"https://twitter.com/intent/tweet?text=Implementing%20the%20Repository%20Pattern%20in%20.NET%20-%20A%20Game%20Changer%20for%20Clean%20Code&url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fimplementing-repository-pattern","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center","children":"Twitter"}],["$","a",null,{"href":"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fimplementing-repository-pattern","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded flex items-center","children":"Facebook"}],["$","a",null,{"href":"https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fimplementing-repository-pattern","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center","children":"LinkedIn"}]]}]]}],["$","div",null,{"className":"mt-16 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Related Articles"}],["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-6","children":[["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/mastering-advanced-features-in-net.png?updatedAt=1746984226226","alt":"Beyond the Basics: Mastering Advanced Features in .NET","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Jan 11, 2025"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["4"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/beyond-the-basics-mastering-advanced-features-in-dotnet","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Beyond the Basics: Mastering Advanced Features in .NET"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Explore advanced .NET features such as reflection, dependency injection, asynchronous programming, and performance optimization to elevate your development skills."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}],["$","$L7","Advanced",{"href":"/tags/Advanced","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Advanced"]}],["$","$L7","Reflection",{"href":"/tags/Reflection","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Reflection"]}],["$","$L7","Dependency Injection",{"href":"/tags/Dependency Injection","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dependency Injection"]}],["$","$L7","Async",{"href":"/tags/Async","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Async"]}],["$","$L7","Performance",{"href":"/tags/Performance","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Performance"]}]]}]]}]]}],["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/long-time-running-tasks.png?updatedAt=1746822507906","alt":"Implementing Long-Running Background Tasks in ASP.NET Core","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Oct 26, 2024"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["4"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/implementing-long-running-background-tasks-in-aspnet-core","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Implementing Long-Running Background Tasks in ASP.NET Core"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Learn how to implement long-running background tasks in ASP.NET Core using hosted services and background workers."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Aspnetcore",{"href":"/tags/Aspnetcore","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Aspnetcore"]}],["$","$L7","Background Tasks",{"href":"/tags/Background Tasks","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Background Tasks"]}],["$","$L7","Hosted Services",{"href":"/tags/Hosted Services","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Hosted Services"]}],["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}]]}]]}]]}]]}]]}]]}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Implementing the Repository Pattern in .NET - A Game Changer for Clean Code | .NET Evangelist"}],["$","meta","3",{"name":"description","content":"Learn how to implement the Repository Pattern in .NET applications to achieve better separation of concerns, testability, and maintainability in your codebase."}],["$","meta","4",{"property":"og:title","content":"Implementing the Repository Pattern in .NET - A Game Changer for Clean Code"}],["$","meta","5",{"property":"og:description","content":"Learn how to implement the Repository Pattern in .NET applications to achieve better separation of concerns, testability, and maintainability in your codebase."}],["$","meta","6",{"property":"og:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Implementing-the-Repository-Pattern-in-NET-A-Game-Changer-for-Clean-Code.jpg?updatedAt=1746813308058"}],["$","meta","7",{"property":"og:type","content":"article"}],["$","meta","8",{"property":"article:published_time","content":"2023-08-05"}],["$","meta","9",{"property":"article:author","content":"Your Name"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"Implementing the Repository Pattern in .NET - A Game Changer for Clean Code"}],["$","meta","12",{"name":"twitter:description","content":"Learn how to implement the Repository Pattern in .NET applications to achieve better separation of concerns, testability, and maintainability in your codebase."}],["$","meta","13",{"name":"twitter:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Implementing-the-Repository-Pattern-in-NET-A-Game-Changer-for-Clean-Code.jpg?updatedAt=1746813308058"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","15",{"name":"next-size-adjust"}]]
1:null
