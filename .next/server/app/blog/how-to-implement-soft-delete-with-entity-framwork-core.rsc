3:I[8369,[],""]
5:I[7206,[],""]
6:I[6124,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeProvider"]
7:I[1893,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],""]
8:I[6159,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","1931","static/chunks/app/page-88df9313d37b14f9.js"],"HeaderSearch"]
9:I[5727,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"MobileMenu"]
a:I[94,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeToggle"]
4:["slug","how-to-implement-soft-delete-with-entity-framwork-core","d"]
0:["GpO592H_LkmWyA7BodWZx",[[["",{"children":["blog",{"children":[["slug","how-to-implement-soft-delete-with-entity-framwork-core","d"],{"children":["__PAGE__?{\"slug\":\"how-to-implement-soft-delete-with-entity-framwork-core\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","how-to-implement-soft-delete-with-entity-framwork-core","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0b32324c4996f85d.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_d65c78 __variable_5899e0 antialiased min-h-screen flex flex-col","children":["$","$L6",null,{"children":[["$","header",null,{"className":"bg-white dark:bg-gray-900 shadow-md","children":["$","div",null,{"className":"container mx-auto px-4 py-3 flex justify-between items-center","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-12 w-16 md:h-14 md:w-20","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-xl md:text-2xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","div",null,{"className":"flex-1 mx-6 max-w-md hidden md:block","children":["$","$L8",null,{}]}],["$","div",null,{"className":"flex items-center space-x-6","children":[["$","nav",null,{"className":"hidden md:block","children":["$","ul",null,{"className":"flex space-x-8","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Home",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Blogs",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["About",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}]]}]}],["$","$L9",null,{}],["$","$La",null,{}]]}]]}]}],["$","main",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"404 - Page Not Found"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-8","children":"The page you are looking for does not exist."}],["$","div",null,{"className":"flex justify-center","children":["$","$L7",null,{"href":"/","className":"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded","data-cy":"home-link","children":"Return Home"}]}]]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"bg-white dark:bg-gray-900 py-8 mt-12 border-t border-gray-200 dark:border-gray-800","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center","children":[["$","div",null,{"className":"mb-6 md:mb-0","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity mb-4","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-10 w-14 md:h-12 md:w-16","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-lg md:text-xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mt-2","children":"Â© 2025 .NET Evangelist. All rights reserved."}]]}],["$","div",null,{"className":"grid grid-cols-2 gap-x-8 gap-y-4","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Navigation"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Blogs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Connect"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"}]}],"Twitter"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}],"GitHub"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"}]}],"LinkedIn"]}]}]]}]]}]]}]]}]}]}]]}]}]}]],null],null],["$Lb",null]]]]
c:I[2364,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"BlogContent"]
e:I[231,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"Image"]
d:T2e2c,{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Soft delete is a powerful technique for managing data in your applications. Instead of permanently removing records from your database, soft delete marks them as \\\"deleted\\\" while keeping the data intact. This approach offers several benefits, including easy data recovery and improved auditing capabilities. In this article, we'll explore how to implement soft delete in a .NET application using Entity Framework Core.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Why Use Soft Delete?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before diving into the implementation, let's briefly discuss why soft delete is beneficial:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Data Recovery:\"\n        }), \" Accidentally deleted data can be easily restored.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Auditing:\"\n        }), \" Maintain a history of when items were \\\"deleted\\\".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Consistency:\"\n        }), \" Preserve referential integrity in related data.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Performance:\"\n        }), \" In some cases, soft delete can be more performant than hard delete operations.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Implementation Steps\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's walk through the process of implementing soft delete in a .NET application using Entity Framework Core.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 1: Create the ISoftDeletable Interface\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, we'll define an interface that our entities will implement to support soft delete:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public interface ISoftDeletable\\n{\\n    bool IsDeleted { get; set; }\\n    DateTime? DeletedAtUtc { get; set; }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This interface includes two properties:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"IsDeleted\"\n        }), \": A flag indicating whether the entity is considered deleted.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"DeletedAtUtc\"\n        }), \": The date and time when the entity was marked as deleted.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 2: Implement the Interface in Your Entity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next, implement the \", _jsx(_components.code, {\n        children: \"ISoftDeletable\"\n      }), \" interface in your entity classes. Here's an example with a \", _jsx(_components.code, {\n        children: \"Movie\"\n      }), \" entity:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public class Movie : ISoftDeletable\\n{\\n    public int Id { get; set; }\\n    public string Title { get; set; }\\n    public int Year { get; set; }\\n\\n    // ISoftDeletable implementation\\n    public bool IsDeleted { get; set; }\\n    public DateTime? DeletedAtUtc { get; set; }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 3: Configure the DbContext with Global Query Filter\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In your \", _jsx(_components.code, {\n        children: \"DbContext\"\n      }), \" class, override the \", _jsx(_components.code, {\n        children: \"OnModelCreating\"\n      }), \" method to add a global query filter for soft delete. This is a crucial step that eliminates the need to include the \", _jsx(_components.code, {\n        children: \"!IsDeleted\"\n      }), \" condition in every query:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public class AppDbContext : DbContext\\n{\\n    public DbSet<Movie> Movies { get; set; }\\n\\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\\n    {\\n        base.OnModelCreating(modelBuilder);\\n\\n        // Apply global query filter for soft delete\\n        modelBuilder.Model.GetEntityTypes()\\n            .Where(entityType => typeof(ISoftDeletable).IsAssignableFrom(entityType.ClrType))\\n            .ToList()\\n            .ForEach(entityType =>\\n            {\\n                var parameter = Expression.Parameter(entityType.ClrType, \\\"e\\\");\\n                var property = Expression.Property(parameter, nameof(ISoftDeletable.IsDeleted));\\n                var falseConstant = Expression.Constant(false);\\n                var lambdaExpression = Expression.Lambda(Expression.Equal(property, falseConstant), parameter);\\n\\n                modelBuilder.Entity(entityType.ClrType).HasQueryFilter(lambdaExpression);\\n\\n\\n                 // Add filtered index for better performance (Optional but Recommended)\\n                modelBuilder.Entity(entityType.ClrType)\\n                    .HasIndex(nameof(ISoftDeletable.IsDeleted))\\n                    .HasFilter($\\\"\\\\\\\"{nameof(ISoftDeletable.IsDeleted)}\\\\\\\" = 0\\\") // Use $\\\"\\\" for interpolated strings and escape column name for potential reserved words.\\n                    .HasDatabaseName($\\\"IX_{entityType.ClrType.Name}_{nameof(ISoftDeletable.IsDeleted)}\\\");\\n\\n            });\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This enhanced \", _jsx(_components.code, {\n        children: \"OnModelCreating\"\n      }), \" method now iterates through all entities in your model and applies the global query filter \", _jsx(_components.em, {\n        children: \"only\"\n      }), \" to those that implement the \", _jsx(_components.code, {\n        children: \"ISoftDeletable\"\n      }), \" interface.  It also dynamically creates a filtered index for each of these entities, significantly improving query performance, especially for large datasets.  The code also addresses potential issues with reserved keywords by escaping column names in the filter and index name.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 4: Implement Soft Delete in Your Service/Repository Layer\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example uses a more robust approach with \", _jsx(_components.code, {\n        children: \"ExecuteUpdateAsync\"\n      }), \" for better performance, especially with large datasets:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public async Task<bool> SoftDeleteMovieAsync(int id)\\n{\\n    var affectedRows = await _context.Movies\\n        .Where(m => m.Id == id) // No need to check IsDeleted here due to the global filter\\n        .ExecuteUpdateAsync(s => s.SetProperty(m => m.IsDeleted, true)\\n                                   .SetProperty(m => m.DeletedAtUtc, DateTime.UtcNow));\\n\\n    return affectedRows > 0;\\n}\\n\\n\\npublic async Task<Movie?> GetMovieByIdAsync(int id, bool includeDeleted = false)\\n{\\n    var query = _context.Movies.AsQueryable();\\n\\n    if (includeDeleted)\\n    {\\n        query = query.IgnoreQueryFilters();\\n    }\\n\\n    return await query.FirstOrDefaultAsync(m => m.Id == id);\\n}\\n\\n\\n\\n// Example usage in a controller:\\n[HttpDelete(\\\"{id}\\\")]\\npublic async Task<IActionResult> DeleteMovie(int id)\\n{\\n    var deleted = await _movieService.SoftDeleteMovieAsync(id);\\n\\n    if (!deleted)\\n    {\\n        return NotFound();\\n    }\\n\\n    return NoContent();\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This service layer example clearly demonstrates the soft delete operation and how to retrieve data, both with and without applying the soft delete filter. The controller code provides a practical example of how this service method might be used.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 5: Querying Data (Including and Excluding Deleted Items)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With the global query filter in place, your normal queries will automatically exclude soft-deleted items:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"// This query will only return non-deleted movies thanks to the global query filter.\\npublic async Task<List<Movie>> GetAllMoviesAsync()\\n{\\n    return await _context.Movies.ToListAsync();\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need to retrieve soft-deleted entities for specific purposes (e.g., an admin view), you can use the \", _jsx(_components.code, {\n        children: \"IgnoreQueryFilters()\"\n      }), \" method:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"// This query retrieves ALL movies, including soft-deleted ones.\\npublic async Task<List<Movie>> GetAllMoviesIncludingDeletedAsync()\\n{\\n    return await _context.Movies.IgnoreQueryFilters().ToListAsync();\\n}\\n\\n\\npublic async Task<List<Movie>> GetDeletedMoviesAsync()\\n{\\n    return await _context.Movies.IgnoreQueryFilters().Where(m => m.IsDeleted).ToListAsync();\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These examples provide practical ways to retrieve both active and deleted records.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Implementing soft delete with a global query filter in Entity Framework Core provides a robust, efficient, and clean way to manage data deletion in your .NET applications.  This method simplifies your data access layer, improves performance with filtered indexes, and provides greater flexibility in managing your data lifecycle.  Remember to carefully consider the implications of soft delete on your application's design and performance.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {})\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}2:["$","article",null,{"className":"container mx-auto px-4 py-8 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4","children":[["$","span",null,{"children":"2024-10-02"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["5"," min read"]}]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"Implementing Soft Delete in .NET with Entity Framework Core"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-6","children":"Learn how to implement soft delete functionality in your .NET applications using Entity Framework Core, improving data management and recoverability."}],["$","div",null,{"className":"aspect-video relative overflow-hidden rounded-lg mb-8","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/soft_delete_with_entity_framework_core.jpg?updatedAt=1746813294522","alt":"Implementing Soft Delete in .NET with Entity Framework Core","className":"object-cover w-full h-full"}]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-8","children":[["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}],["$","$L7","Efcore",{"href":"/tags/Efcore","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Efcore"]}],["$","$L7","Softdelete",{"href":"/tags/Softdelete","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Softdelete"]}],["$","$L7","Database",{"href":"/tags/Database","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Database"]}],["$","$L7","Crud",{"href":"/tags/Crud","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Crud"]}]]}]]}],["$","$Lc",null,{"content":"$d"}],["$","div",null,{"className":"mt-12 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Share this post"}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"https://twitter.com/intent/tweet?text=Implementing%20Soft%20Delete%20in%20.NET%20with%20Entity%20Framework%20Core&url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fhow-to-implement-soft-delete-with-entity-framwork-core","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center","children":"Twitter"}],["$","a",null,{"href":"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fhow-to-implement-soft-delete-with-entity-framwork-core","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded flex items-center","children":"Facebook"}],["$","a",null,{"href":"https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fhow-to-implement-soft-delete-with-entity-framwork-core","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center","children":"LinkedIn"}]]}]]}],["$","div",null,{"className":"mt-16 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Related Articles"}],["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-6","children":[["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/mastering-common-table-expressions.png?updatedAt=1746993563622","alt":"Mastering Common Table Expressions (CTEs) in PostgreSQL: Recursive Queries and Performance Tips","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"May 11, 2025"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["7"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/mastering-common-table-expressions-ctes-in-postgresql-recursive-queries-performance-tips","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Mastering Common Table Expressions (CTEs) in PostgreSQL: Recursive Queries and Performance Tips"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"A comprehensive guide to Common Table Expressions (CTEs) in PostgreSQL, including recursive queries, practical use cases, and performance optimization tips for writing efficient, maintainable SQL."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Postgresql",{"href":"/tags/Postgresql","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Postgresql"]}],["$","$L7","Sql",{"href":"/tags/Sql","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Sql"]}],["$","$L7","Cte",{"href":"/tags/Cte","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Cte"]}],["$","$L7","Database",{"href":"/tags/Database","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Database"]}],["$","$L7","Performance",{"href":"/tags/Performance","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Performance"]}],["$","$L7","Recursion",{"href":"/tags/Recursion","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Recursion"]}]]}]]}]]}],["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/mastering-advanced-features-in-net.png?updatedAt=1746984226226","alt":"Beyond the Basics: Mastering Advanced Features in .NET","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Jan 11, 2025"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["4"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/beyond-the-basics-mastering-advanced-features-in-dotnet","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Beyond the Basics: Mastering Advanced Features in .NET"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Explore advanced .NET features such as reflection, dependency injection, asynchronous programming, and performance optimization to elevate your development skills."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}],["$","$L7","Advanced",{"href":"/tags/Advanced","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Advanced"]}],["$","$L7","Reflection",{"href":"/tags/Reflection","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Reflection"]}],["$","$L7","Dependency Injection",{"href":"/tags/Dependency Injection","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dependency Injection"]}],["$","$L7","Async",{"href":"/tags/Async","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Async"]}],["$","$L7","Performance",{"href":"/tags/Performance","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Performance"]}]]}]]}]]}]]}]]}]]}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Implementing Soft Delete in .NET with Entity Framework Core | .NET Evangelist"}],["$","meta","3",{"name":"description","content":"Learn how to implement soft delete functionality in your .NET applications using Entity Framework Core, improving data management and recoverability."}],["$","meta","4",{"property":"og:title","content":"Implementing Soft Delete in .NET with Entity Framework Core"}],["$","meta","5",{"property":"og:description","content":"Learn how to implement soft delete functionality in your .NET applications using Entity Framework Core, improving data management and recoverability."}],["$","meta","6",{"property":"og:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/soft_delete_with_entity_framework_core.jpg?updatedAt=1746813294522"}],["$","meta","7",{"property":"og:type","content":"article"}],["$","meta","8",{"property":"article:published_time","content":"2024-10-02"}],["$","meta","9",{"property":"article:author","content":"Your Name"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"Implementing Soft Delete in .NET with Entity Framework Core"}],["$","meta","12",{"name":"twitter:description","content":"Learn how to implement soft delete functionality in your .NET applications using Entity Framework Core, improving data management and recoverability."}],["$","meta","13",{"name":"twitter:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/soft_delete_with_entity_framework_core.jpg?updatedAt=1746813294522"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","15",{"name":"next-size-adjust"}]]
1:null
