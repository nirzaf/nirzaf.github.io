3:I[8369,[],""]
5:I[7206,[],""]
6:I[6124,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeProvider"]
7:I[1893,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],""]
8:I[6159,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","1931","static/chunks/app/page-88df9313d37b14f9.js"],"HeaderSearch"]
9:I[5727,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"MobileMenu"]
a:I[94,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeToggle"]
4:["slug","asynchronous-programming-with-async-await-task-in-csharp","d"]
0:["GpO592H_LkmWyA7BodWZx",[[["",{"children":["blog",{"children":[["slug","asynchronous-programming-with-async-await-task-in-csharp","d"],{"children":["__PAGE__?{\"slug\":\"asynchronous-programming-with-async-await-task-in-csharp\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","asynchronous-programming-with-async-await-task-in-csharp","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0b32324c4996f85d.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_d65c78 __variable_5899e0 antialiased min-h-screen flex flex-col","children":["$","$L6",null,{"children":[["$","header",null,{"className":"bg-white dark:bg-gray-900 shadow-md","children":["$","div",null,{"className":"container mx-auto px-4 py-3 flex justify-between items-center","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-12 w-16 md:h-14 md:w-20","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-xl md:text-2xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","div",null,{"className":"flex-1 mx-6 max-w-md hidden md:block","children":["$","$L8",null,{}]}],["$","div",null,{"className":"flex items-center space-x-6","children":[["$","nav",null,{"className":"hidden md:block","children":["$","ul",null,{"className":"flex space-x-8","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Home",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Blogs",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["About",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}]]}]}],["$","$L9",null,{}],["$","$La",null,{}]]}]]}]}],["$","main",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"404 - Page Not Found"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-8","children":"The page you are looking for does not exist."}],["$","div",null,{"className":"flex justify-center","children":["$","$L7",null,{"href":"/","className":"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded","data-cy":"home-link","children":"Return Home"}]}]]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"bg-white dark:bg-gray-900 py-8 mt-12 border-t border-gray-200 dark:border-gray-800","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center","children":[["$","div",null,{"className":"mb-6 md:mb-0","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity mb-4","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-10 w-14 md:h-12 md:w-16","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-lg md:text-xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mt-2","children":"Â© 2025 .NET Evangelist. All rights reserved."}]]}],["$","div",null,{"className":"grid grid-cols-2 gap-x-8 gap-y-4","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Navigation"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Blogs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Connect"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"}]}],"Twitter"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}],"GitHub"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"}]}],"LinkedIn"]}]}]]}]]}]]}]]}]}]}]]}]}]}]],null],null],["$Lb",null]]]]
c:I[2364,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"BlogContent"]
e:I[231,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"Image"]
d:T39c1,{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Asynchronous Programming With Async Await Task in C#\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"C# and .NET Framework (4.5 & Core) supports asynchronous programming using some native functions, classes, and reserved keywords.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before we see what is asynchronous programming, let's understand what is synchronous programming using the following console example.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Synchronous Programming Example\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"static void Main(string[] args)\\n{\\n    LongProcess();\\n\\n    ShortProcess();\\n}\\n\\nstatic void LongProcess()\\n{\\n    Console.WriteLine(\\\"LongProcess Started\\\");\\n\\n    //some code that takes long execution time\\n    System.Threading.Thread.Sleep(4000); // hold execution for 4 seconds\\n\\n    Console.WriteLine(\\\"LongProcess Completed\\\");\\n}\\n\\nstatic void ShortProcess() {\\n    Console.WriteLine(\\\"ShortProcess Started\\\");\\n\\n    //do something here\\n\\n    Console.WriteLine(\\\"ShortProcess Completed\\\");\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Output:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"LongProcess Started\\nLongProcess Completed\\nShortProcess Started\\nShortProcess Completed\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the above example, the \", _jsx(_components.code, {\n        children: \"LongProcess()\"\n      }), \" method takes 4 seconds to complete. The \", _jsx(_components.code, {\n        children: \"ShortProcess()\"\n      }), \" method takes a very short time to complete. But the \", _jsx(_components.code, {\n        children: \"ShortProcess()\"\n      }), \" method has to wait for the \", _jsx(_components.code, {\n        children: \"LongProcess()\"\n      }), \" method to complete. This is called synchronous programming.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In synchronous programming, the program execution waits for the current task to complete before moving on to another task. This is the default behavior of the program.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The above program executes synchronously. It means execution starts from the Main() method wherein it first executes the LongProcess() method and then ShortProcess() method. During the execution, an application gets blocked and becomes unresponsive (You can see this in Windows-based applications mainly). This is called synchronous programming where execution does not go to next line until the current line executed completely.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"What is Asynchronous Programming?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In asynchronous programming, the code gets executed in a thread without having to wait for an I/O-bound or long-running task to finish. For example, in the asynchronous programming model, the LongProcess() method will be executed in a separate thread from the thread pool, and the main application thread will continue to execute the next statement.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Microsoft recommends \", _jsx(_components.a, {\n        href: \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model\",\n        children: \"Task-based Asynchronous Pattern\"\n      }), \" to implement asynchronous programming in the \", _jsx(_components.a, {\n        href: \"https://dotnet.microsoft.com/en-us/download/dotnet-framework\",\n        children: \".NET Framework\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"https://dotnet.microsoft.com/en-us/download/dotnet-framework\",\n        children: \".NET Core\"\n      }), \" applications using \", _jsx(_components.code, {\n        children: \"async\"\n      }), \" , await keywords and \", _jsx(_components.code, {\n        children: \"Task\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Task<TResult>\"\n      }), \" class.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now let's rewrite the above example in asynchronous pattern using \", _jsx(_components.code, {\n        children: \"async\"\n      }), \" keyword.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Asynchronous Programming Example\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"static async Task Main(string[] args)\\n{\\n    LongProcess();\\n\\n    ShortProcess();\\n}\\n\\nstatic async void LongProcess()\\n{\\n    Console.WriteLine(\\\"LongProcess Started\\\");\\n\\n    await Task.Delay(4000); // hold execution for 4 seconds\\n\\n    Console.WriteLine(\\\"LongProcess Completed\\\");\\n\\n}\\n\\nstatic void ShortProcess() {\\n    Console.WriteLine(\\\"ShortProcess Started\\\");\\n\\n    //do something here\\n\\n    Console.WriteLine(\\\"ShortProcess Completed\\\");\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Output:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"LongProcess Started\\nShortProcess Started\\nShortProcess Completed\\nLongProcess Completed\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the above example, the Main() method is marked by the async keyword, and the return type is Task. The async keyword marks the method as asynchronous. Note that all the methods in the method chain must be async in order to implement asynchronous programming. So, the Main() method must be async to make child methods asynchronous.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The LongProcess() method is also marked with the async keyword which makes it asynchronous. The await Task.Delay(4000); holds the thread execute for 4 seconds.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, the program starts executing from the async Main() method in the main application thread. The async LongProcess() method gets executed in a separate thread and the main application thread continues execution of the next statement which calls ShortProcess() method and does not wait for the LongProcess() to complete.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"async, await, and Task\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use async along with await and Task if the async method returns a value back to the calling code. We used only the async keyword in the above program to demonstrate the simple asynchronous void method.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The await keyword waits for the async method until it returns a value. So the main application thread stops there until it receives a return value.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Task class represents an asynchronous operation and \", _jsx(_components.code, {\n        children: \"Task<TResult>\"\n      }), \" generic class represents an operation that can return a value. In the above example, we used await Task.Delay(4000) that started async operation that sleeps for 4 seconds and await holds a thread until 4 seconds.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following demonstrates the async method that returns a value.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"static async Task Main(string[] args)\\n{\\n    Task<int> result = LongProcess();\\n\\n    ShortProcess();\\n\\n    var val = await result; // wait untile get the return value\\n\\n    Console.WriteLine(\\\"Result: {0}\\\", val);\\n\\n    Console.ReadKey();\\n}\\n\\nstatic async Task<int> LongProcess()\\n{\\n    Console.WriteLine(\\\"LongProcess Started\\\");\\n\\n    await Task.Delay(4000); // hold execution for 4 seconds\\n\\n    Console.WriteLine(\\\"LongProcess Completed\\\");\\n\\n    return 10;\\n}\\n\\nstatic void ShortProcess()\\n{\\n    Console.WriteLine(\\\"ShortProcess Started\\\");\\n\\n    //do something here\\n\\n    Console.WriteLine(\\\"ShortProcess Completed\\\");\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Output:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"LongProcess Started\\nShortProcess Started\\nShortProcess Completed\\nLongProcess Completed\\nResult: 10\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the above example, in the static async \", _jsx(_components.code, {\n        children: \"Task<int>\"\n      }), \" LongProcess() method, \", _jsx(_components.code, {\n        children: \"Task<int>\"\n      }), \" is used to indicate the return value type int. int val = await result; will stop the main thread there until it gets the return value populated in the result. Once get the value in the result variable, it then automatically assigns an integer to val.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An async method should return void, \", _jsx(_components.code, {\n        children: \"Task\"\n      }), \", or \", _jsx(_components.code, {\n        children: \"Task<TResult>\"\n      }), \", where TResult is the return type of the async method. Returning void is normally used for event handlers. The async keyword allows us to use the await keyword within the method so that we can wait for the asynchronous method to complete for other methods which are dependent on the return value.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you have multiple async methods that return the values, then you can use await for all methods just before you want to use the return value in further steps.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Multiple async Methods Example\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"static async Task Main(string[] args)\\n{\\n    Task<int> result1 = LongProcess1();\\n    Task<int> result2 = LongProcess2();\\n\\n    //do something here\\n    Console.WriteLine(\\\"After two long processes.\\\");\\n\\n    int val = await result1; // wait untile get the return value\\n    DisplayResult(val);\\n\\n    val = await result2; // wait untile get the return value\\n    DisplayResult(val);\\n\\n    Console.ReadKey();\\n}\\n\\nstatic async Task<int> LongProcess1()\\n{\\n    Console.WriteLine(\\\"LongProcess 1 Started\\\");\\n\\n    await Task.Delay(4000); // hold execution for 4 seconds\\n\\n    Console.WriteLine(\\\"LongProcess 1 Completed\\\");\\n\\n    return 10;\\n}\\n\\nstatic async Task<int> LongProcess2()\\n{\\n    Console.WriteLine(\\\"LongProcess 2 Started\\\");\\n\\n    await Task.Delay(4000); // hold execution for 4 seconds\\n\\n    Console.WriteLine(\\\"LongProcess 2 Completed\\\");\\n\\n    return 20;\\n}\\n\\nstatic void DisplayResult(int val)\\n{\\n    Console.WriteLine(val);\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Output:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"LongProcess 1 Started\\nLongProcess 2 Started\\nAfter two long processes.\\nLongProcess 2 Completed\\nLongProcess 1 Completed\\n10\\n20\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the above program, we do await result1 and await result2 just before we need to pass the return value to another method.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Thus, you can use async, await, and Task to implement asynchronous programming in .NET Framework or .NET Core using C#.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this article, we learned about asynchronous programming in C# using async, await, and Task. We also learned how to implement asynchronous programming in .NET Framework or .NET Core using C#.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"References\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/\",\n          children: \"Asynchronous programming with async and await\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-based-asynchronous-programming\",\n          children: \"Task-based Asynchronous Pattern\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/index\",\n          children: \"Asynchronous programming\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.tutorialsteacher.com/articles/asynchronous-programming-with-async-await-task-csharp\",\n          children: \"Asynchronous programming with async, await, Task in C#\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}2:["$","article",null,{"className":"container mx-auto px-4 py-8 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4","children":[["$","span",null,{"children":"2023-05-03"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["6"," min read"]}]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"Asynchronous Programming With Async Await Task in C#"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-6","children":"Learn about asynchronous programming in C# using async, await, and Task."}],["$","div",null,{"className":"aspect-video relative overflow-hidden rounded-lg mb-8","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Asynchronous_Programming_With_Async_Await_Task_In_CSharp.jpg?updatedAt=1746813313287","alt":"Asynchronous Programming With Async Await Task in C#","className":"object-cover w-full h-full"}]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-8","children":[["$","$L7","Csharp",{"href":"/tags/Csharp","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Csharp"]}],["$","$L7","Async",{"href":"/tags/Async","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Async"]}],["$","$L7","Await",{"href":"/tags/Await","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Await"]}],["$","$L7","Task",{"href":"/tags/Task","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Task"]}]]}]]}],["$","$Lc",null,{"content":"$d"}],["$","div",null,{"className":"mt-12 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Share this post"}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"https://twitter.com/intent/tweet?text=Asynchronous%20Programming%20With%20Async%20Await%20Task%20in%20C%23&url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fasynchronous-programming-with-async-await-task-in-csharp","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center","children":"Twitter"}],["$","a",null,{"href":"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fasynchronous-programming-with-async-await-task-in-csharp","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded flex items-center","children":"Facebook"}],["$","a",null,{"href":"https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fasynchronous-programming-with-async-await-task-in-csharp","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center","children":"LinkedIn"}]]}]]}],["$","div",null,{"className":"mt-16 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Related Articles"}],["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-6","children":[["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/mastering-advanced-features-in-net.png?updatedAt=1746984226226","alt":"Beyond the Basics: Mastering Advanced Features in .NET","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Jan 11, 2025"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["4"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/beyond-the-basics-mastering-advanced-features-in-dotnet","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Beyond the Basics: Mastering Advanced Features in .NET"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Explore advanced .NET features such as reflection, dependency injection, asynchronous programming, and performance optimization to elevate your development skills."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}],["$","$L7","Advanced",{"href":"/tags/Advanced","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Advanced"]}],["$","$L7","Reflection",{"href":"/tags/Reflection","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Reflection"]}],["$","$L7","Dependency Injection",{"href":"/tags/Dependency Injection","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dependency Injection"]}],["$","$L7","Async",{"href":"/tags/Async","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Async"]}],["$","$L7","Performance",{"href":"/tags/Performance","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Performance"]}]]}]]}]]}],["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Advanced_C_Programming_Delegates_Events_Generics_Async_Await_and_LINQ.jpg?updatedAt=1746813313763","alt":"A Deep Dive into Delegates, Events, Generics, Async/Await, and LINQ","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Oct 6, 2024"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["5"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/advanced-csharp-programming-delegates-events-generics-async-await-and-linq","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"A Deep Dive into Delegates, Events, Generics, Async/Await, and LINQ"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Learn about advanced C# concepts like delegates, events, generics, async/await tasks, and LINQ."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Csharp",{"href":"/tags/Csharp","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Csharp"]}],["$","$L7","Async",{"href":"/tags/Async","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Async"]}],["$","$L7","Await",{"href":"/tags/Await","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Await"]}],["$","$L7","Task",{"href":"/tags/Task","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Task"]}]]}]]}]]}]]}]]}]]}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Asynchronous Programming With Async Await Task in C# | .NET Evangelist"}],["$","meta","3",{"name":"description","content":"Learn about asynchronous programming in C# using async, await, and Task."}],["$","meta","4",{"property":"og:title","content":"Asynchronous Programming With Async Await Task in C#"}],["$","meta","5",{"property":"og:description","content":"Learn about asynchronous programming in C# using async, await, and Task."}],["$","meta","6",{"property":"og:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Asynchronous_Programming_With_Async_Await_Task_In_CSharp.jpg?updatedAt=1746813313287"}],["$","meta","7",{"property":"og:type","content":"article"}],["$","meta","8",{"property":"article:published_time","content":"2023-05-03"}],["$","meta","9",{"property":"article:author","content":"Your Name"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"Asynchronous Programming With Async Await Task in C#"}],["$","meta","12",{"name":"twitter:description","content":"Learn about asynchronous programming in C# using async, await, and Task."}],["$","meta","13",{"name":"twitter:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Asynchronous_Programming_With_Async_Await_Task_In_CSharp.jpg?updatedAt=1746813313287"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","15",{"name":"next-size-adjust"}]]
1:null
