3:I[8369,[],""]
5:I[7206,[],""]
6:I[6124,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeProvider"]
7:I[1893,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],""]
8:I[6159,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","1931","static/chunks/app/page-88df9313d37b14f9.js"],"HeaderSearch"]
9:I[5727,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"MobileMenu"]
a:I[94,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeToggle"]
4:["slug","csharp-dictionaries","d"]
0:["GpO592H_LkmWyA7BodWZx",[[["",{"children":["blog",{"children":[["slug","csharp-dictionaries","d"],{"children":["__PAGE__?{\"slug\":\"csharp-dictionaries\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","csharp-dictionaries","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0b32324c4996f85d.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_d65c78 __variable_5899e0 antialiased min-h-screen flex flex-col","children":["$","$L6",null,{"children":[["$","header",null,{"className":"bg-white dark:bg-gray-900 shadow-md","children":["$","div",null,{"className":"container mx-auto px-4 py-3 flex justify-between items-center","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-12 w-16 md:h-14 md:w-20","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-xl md:text-2xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","div",null,{"className":"flex-1 mx-6 max-w-md hidden md:block","children":["$","$L8",null,{}]}],["$","div",null,{"className":"flex items-center space-x-6","children":[["$","nav",null,{"className":"hidden md:block","children":["$","ul",null,{"className":"flex space-x-8","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Home",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Blogs",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["About",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}]]}]}],["$","$L9",null,{}],["$","$La",null,{}]]}]]}]}],["$","main",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"404 - Page Not Found"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-8","children":"The page you are looking for does not exist."}],["$","div",null,{"className":"flex justify-center","children":["$","$L7",null,{"href":"/","className":"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded","data-cy":"home-link","children":"Return Home"}]}]]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"bg-white dark:bg-gray-900 py-8 mt-12 border-t border-gray-200 dark:border-gray-800","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center","children":[["$","div",null,{"className":"mb-6 md:mb-0","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity mb-4","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-10 w-14 md:h-12 md:w-16","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-lg md:text-xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mt-2","children":"Â© 2025 .NET Evangelist. All rights reserved."}]]}],["$","div",null,{"className":"grid grid-cols-2 gap-x-8 gap-y-4","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Navigation"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Blogs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Connect"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"}]}],"Twitter"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}],"GitHub"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"}]}],"LinkedIn"]}]}]]}]]}]]}]]}]}]}]]}]}]}]],null],null],["$Lb",null]]]]
c:I[2364,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"BlogContent"]
e:I[231,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"Image"]
d:T2cd5,{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    img: \"img\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"C# provides a powerful data structure called Dictionary that allows you to store key-value pairs.\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A dictionary is a collection of key-value pairs. It is a data structure used to store data in the form of key-value pairs. The key-value pair is also referred to as an entry. The key is used to retrieve the data associated with it. The key must be unique and immutable. The value can be changed. The value can be of any type. The key and value can be of the same type or of different types.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Dictionary Characteristics\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"<TKey, TValue>\"\n        }), \" stores key-value pairs.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Comes under .Collections.Generic namespace.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Implements \", _jsx(_components.code, {\n          children: \"<TKey, TValue>\"\n        }), \" interface.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Keys must be unique and cannot be null.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Values can be null or duplicate.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Values can be accessed bypassing associated key in the indexer e.g. \", _jsx(_components.code, {\n          children: \"myDictionary[key]\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Elements are stored as \", _jsx(_components.code, {\n          children: \"KeyValuePair<TKey, TValue>\"\n        }), \" objects.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Creating a Dictionary\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can create the \", _jsx(_components.code, {\n        children: \"<TKey, TValue>\"\n      }), \"  object bypassing the type of keys and values it can store. The following example shows how to create a dictionary and add key-value pairs.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"using System;\\nusing System.Collections.Generic;\\n\\nnamespace Dictionary\\n{\\n    class Program\\n    {\\n        static void Main(string[] args)\\n        {\\n            Dictionary<string, string> capitals = new Dictionary<string, string>();\\n            capitals.Add(\\\"England\\\", \\\"London\\\");\\n            capitals.Add(\\\"Germany\\\", \\\"Berlin\\\");\\n            capitals.Add(\\\"Russia\\\", \\\"Moscow\\\");\\n            capitals.Add(\\\"USA\\\", \\\"Washington\\\");\\n            capitals.Add(\\\"Ukraine\\\", \\\"Kyiv\\\");\\n\\n            foreach (KeyValuePair<string, string> keyValue in capitals)\\n            {\\n                Console.WriteLine(keyValue.Key + \\\" - \\\" + keyValue.Value);\\n            }\\n\\n            Console.WriteLine(\\\"The capital of England is \\\" + capitals[\\\"England\\\"]);\\n            Console.WriteLine(\\\"The capital of Germany is \\\" + capitals[\\\"Germany\\\"]);\\n            Console.WriteLine(\\\"The capital of Russia is \\\" + capitals[\\\"Russia\\\"]);\\n            Console.WriteLine(\\\"The capital of USA is \\\" + capitals[\\\"USA\\\"]);\\n            Console.WriteLine(\\\"The capital of Ukraine is \\\" + capitals[\\\"Ukraine\\\"]);\\n\\n            capitals.Remove(\\\"USA\\\");\\n\\n            Console.WriteLine(\\\"The capital of USA is \\\" + capitals[\\\"USA\\\"]);\\n        }\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Dictionary Class Hierarchy\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://www.tutorialsteacher.com/Content/images/csharp/generic-dictionary.png\",\n        alt: \"Dictionary Class Hierarchy\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Dictionary Methods\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"<TKey, TValue>\"\n      }), \" class provides various methods to perform different operations on the dictionary. The following table lists some of the commonly used methods of the \", _jsx(_components.code, {\n        children: \"<TKey, TValue>\"\n      }), \" class.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| Method                        | Description                                                           |\\n|-------------------------------|-----------------------------------------------------------------------|\\n| Add(TKey, TValue)             | Adds an element with the specified key and value into the dictionary. |\\n| Clear()                       | Removes all the elements from the dictionary.                         |\\n| ContainsKey(TKey)             | Checks whether the specified key exists in the dictionary.            |\\n| ContainsValue(TValue)         | Checks whether the specified value exists in the dictionary.          |\\n| Remove(TKey)                  | Removes the element with the specified key from the dictionary.       |\\n| TryGetValue(TKey, out TValue) | Gets the value associated with the specified key.                     |\\n| Count                         | Gets the number of elements in the dictionary.                        |\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Dictionary Properties\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"<TKey, TValue>\"\n      }), \" class provides various properties to get information about the dictionary. The following table lists some of the commonly used properties of the \", _jsx(_components.code, {\n        children: \"<TKey, TValue>\"\n      }), \" class.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"| Property | Description                                                                 |\\n|----------|-----------------------------------------------------------------------------|\\n| Comparer | Gets the \", _jsx(_components.code, {\n        children: \"<T>\"\n      }), \" that is used to determine equality of keys for the dictionary. |\\n| Keys     | Gets a collection containing the keys in the dictionary.                    |\\n| Values   | Gets a collection containing the values in the dictionary.                  |\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Immutable Dictionaries\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to the standard Dictionary, C# also provides Immutable Dictionaries. These are dictionaries that cannot be modified after they are created, ensuring thread-safety and preventing unintended modifications.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Creating an Immutable Dictionary\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To use Immutable Dictionaries, you need to include the \", _jsx(_components.code, {\n        children: \"System.Collections.Immutable\"\n      }), \" namespace. Here's an example of how to create an Immutable Dictionary:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"using System.Collections.Immutable;\\n\\nvar immutableDictionary = ImmutableDictionary<string, int>.Empty\\n    .Add(\\\"One\\\", 1)\\n    .Add(\\\"Two\\\", 2)\\n    .Add(\\\"Three\\\", 3);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Characteristics of Immutable Dictionaries\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Once created, the dictionary cannot be modified.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Any operation that would modify the dictionary (like Add or Remove) returns a new ImmutableDictionary instance.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Provides thread-safe read operations without the need for locking.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Ideal for scenarios where the dictionary content should not change after initialization.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Methods for Immutable Dictionaries\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Immutable Dictionaries provide methods similar to regular Dictionaries, but with a key difference: methods that would normally modify the dictionary instead return a new instance.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| Method                | Description                                                               |\\n|-----------------------|---------------------------------------------------------------------------|\\n| Add(TKey, TValue)     | Returns a new ImmutableDictionary with the specified key and value added. |\\n| Remove(TKey)          | Returns a new ImmutableDictionary with the specified key removed.         |\\n| SetItem(TKey, TValue) | Returns a new ImmutableDictionary with the specified key-value pair set.  |\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Performance Considerations\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While Immutable Dictionaries provide benefits in terms of safety and predictability, they may have performance implications for large collections or frequent modifications. Each modification operation creates a new instance, which can be memory-intensive for large dictionaries.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"References\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.tutorialsteacher.com/csharp/csharp-dictionary\",\n          children: \"C# Dictionary\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable\",\n          children: \"Immutable Collections\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}2:["$","article",null,{"className":"container mx-auto px-4 py-8 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4","children":[["$","span",null,{"children":"2023-05-01"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["4"," min read"]}]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"Dictionaries in CSharp"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-6","children":"Learn about dictionaries in C# and how to use them effectively."}],["$","div",null,{"className":"aspect-video relative overflow-hidden rounded-lg mb-8","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnet_teach_csharp_immutable_dictionary.jpg?updatedAt=1746813301704","alt":"Dictionaries in CSharp","className":"object-cover w-full h-full"}]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-8","children":[["$","$L7","Csharp",{"href":"/tags/Csharp","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Csharp"]}],["$","$L7","Dictionaries",{"href":"/tags/Dictionaries","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dictionaries"]}],["$","$L7","Hashmaps",{"href":"/tags/Hashmaps","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Hashmaps"]}]]}]]}],["$","$Lc",null,{"content":"$d"}],["$","div",null,{"className":"mt-12 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Share this post"}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"https://twitter.com/intent/tweet?text=Dictionaries%20in%20CSharp&url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fcsharp-dictionaries","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center","children":"Twitter"}],["$","a",null,{"href":"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fcsharp-dictionaries","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded flex items-center","children":"Facebook"}],["$","a",null,{"href":"https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fcsharp-dictionaries","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center","children":"LinkedIn"}]]}]]}],["$","div",null,{"className":"mt-16 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Related Articles"}],["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-6","children":[["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Advanced_C_Programming_Delegates_Events_Generics_Async_Await_and_LINQ.jpg?updatedAt=1746813313763","alt":"A Deep Dive into Delegates, Events, Generics, Async/Await, and LINQ","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Oct 6, 2024"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["5"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/advanced-csharp-programming-delegates-events-generics-async-await-and-linq","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"A Deep Dive into Delegates, Events, Generics, Async/Await, and LINQ"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Learn about advanced C# concepts like delegates, events, generics, async/await tasks, and LINQ."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Csharp",{"href":"/tags/Csharp","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Csharp"]}],["$","$L7","Async",{"href":"/tags/Async","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Async"]}],["$","$L7","Await",{"href":"/tags/Await","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Await"]}],["$","$L7","Task",{"href":"/tags/Task","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Task"]}]]}]]}]]}],["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/Asynchronous_Programming_With_Async_Await_Task_In_CSharp.jpg?updatedAt=1746813313287","alt":"Asynchronous Programming With Async Await Task in C#","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"May 3, 2023"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["6"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/asynchronous-programming-with-async-await-task-in-csharp","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Asynchronous Programming With Async Await Task in C#"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Learn about asynchronous programming in C# using async, await, and Task."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Csharp",{"href":"/tags/Csharp","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Csharp"]}],["$","$L7","Async",{"href":"/tags/Async","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Async"]}],["$","$L7","Await",{"href":"/tags/Await","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Await"]}],["$","$L7","Task",{"href":"/tags/Task","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Task"]}]]}]]}]]}]]}]]}]]}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Dictionaries in CSharp | .NET Evangelist"}],["$","meta","3",{"name":"description","content":"Learn about dictionaries in C# and how to use them effectively."}],["$","meta","4",{"property":"og:title","content":"Dictionaries in CSharp"}],["$","meta","5",{"property":"og:description","content":"Learn about dictionaries in C# and how to use them effectively."}],["$","meta","6",{"property":"og:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnet_teach_csharp_immutable_dictionary.jpg?updatedAt=1746813301704"}],["$","meta","7",{"property":"og:type","content":"article"}],["$","meta","8",{"property":"article:published_time","content":"2023-05-01"}],["$","meta","9",{"property":"article:author","content":"Your Name"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"Dictionaries in CSharp"}],["$","meta","12",{"name":"twitter:description","content":"Learn about dictionaries in C# and how to use them effectively."}],["$","meta","13",{"name":"twitter:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnet_teach_csharp_immutable_dictionary.jpg?updatedAt=1746813301704"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","15",{"name":"next-size-adjust"}]]
1:null
