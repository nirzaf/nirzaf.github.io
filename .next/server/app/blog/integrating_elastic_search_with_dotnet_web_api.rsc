3:I[8369,[],""]
5:I[7206,[],""]
6:I[6124,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeProvider"]
7:I[1893,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],""]
8:I[6159,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","1931","static/chunks/app/page-88df9313d37b14f9.js"],"HeaderSearch"]
9:I[5727,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"MobileMenu"]
a:I[94,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeToggle"]
4:["slug","integrating_elastic_search_with_dotnet_web_api","d"]
0:["GpO592H_LkmWyA7BodWZx",[[["",{"children":["blog",{"children":[["slug","integrating_elastic_search_with_dotnet_web_api","d"],{"children":["__PAGE__?{\"slug\":\"integrating_elastic_search_with_dotnet_web_api\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","integrating_elastic_search_with_dotnet_web_api","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0b32324c4996f85d.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_d65c78 __variable_5899e0 antialiased min-h-screen flex flex-col","children":["$","$L6",null,{"children":[["$","header",null,{"className":"bg-white dark:bg-gray-900 shadow-md","children":["$","div",null,{"className":"container mx-auto px-4 py-3 flex justify-between items-center","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-12 w-16 md:h-14 md:w-20","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-xl md:text-2xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","div",null,{"className":"flex-1 mx-6 max-w-md hidden md:block","children":["$","$L8",null,{}]}],["$","div",null,{"className":"flex items-center space-x-6","children":[["$","nav",null,{"className":"hidden md:block","children":["$","ul",null,{"className":"flex space-x-8","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Home",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Blogs",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["About",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}]]}]}],["$","$L9",null,{}],["$","$La",null,{}]]}]]}]}],["$","main",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"404 - Page Not Found"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-8","children":"The page you are looking for does not exist."}],["$","div",null,{"className":"flex justify-center","children":["$","$L7",null,{"href":"/","className":"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded","data-cy":"home-link","children":"Return Home"}]}]]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"bg-white dark:bg-gray-900 py-8 mt-12 border-t border-gray-200 dark:border-gray-800","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center","children":[["$","div",null,{"className":"mb-6 md:mb-0","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity mb-4","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-10 w-14 md:h-12 md:w-16","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-lg md:text-xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mt-2","children":"Â© 2025 .NET Evangelist. All rights reserved."}]]}],["$","div",null,{"className":"grid grid-cols-2 gap-x-8 gap-y-4","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Navigation"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Blogs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Connect"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"}]}],"Twitter"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}],"GitHub"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"}]}],"LinkedIn"]}]}]]}]]}]]}]]}]}]}]]}]}]}]],null],null],["$Lb",null]]]]
c:I[2364,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"BlogContent"]
e:I[231,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"Image"]
d:T35d3,{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"ElasticSearch offers several benefits, including high-performance search, real-time search, full-text search, faceting, geolocation search, analytics capabilities, ease of use, scalability, reliability, and open-source nature. These features make it a popular choice for search and analytics applications, as it can handle large datasets, provide fast and accurate results, and be easily integrated into different systems.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setting up ElasticSearch Locally using Docker Compose\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's begin by creating a new .NET project and adding a new file named \", _jsx(_components.code, {\n        children: \"docker-compose.yml\"\n      }), \" to the root of the project. This file will define the services used in the Docker Compose environment.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"version: '3.8'\\nservices:\\n  elasticsearch:\\n    container_name: els\\n    image: elasticsearch:8.15.0\\n    ports:\\n      - \\\"9200:9200\\\"\\n    volumes:\\n      - elasticsearch-data:/usr/share/elasticsearch/data\\n    environment:\\n      - discovery.type=single-node\\n      - xpack.security.enabled=false\\n    networks:\\n      - elk\\n  kibana:\\n    container_name: kibana\\n    image: kibana:8.15.0\\n    ports:\\n      - \\\"5601:5601\\\"\\n    depends_on:\\n      - elasticsearch\\n    environment:\\n      - ELASTICSEARCH_URL=http://elasticsearch:9200\\n    networks:\\n      - elk\\nnetworks:\\n  elk:\\n    driver: bridge\\nvolumes:\\n  elasticsearch-data:\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This \", _jsx(_components.code, {\n        children: \"docker-compose.yml\"\n      }), \" file defines two services: Elasticsearch and Kibana.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Elasticsearch service is configured to run a single node of Elasticsearch version 8.15.0. It maps port 9200 of the container to port 9200 of the host machine. The \", _jsx(_components.code, {\n        children: \"volumes\"\n      }), \" section defines a volume named \", _jsx(_components.code, {\n        children: \"elasticsearch-data\"\n      }), \" that will store the data of the Elasticsearch service. The \", _jsx(_components.code, {\n        children: \"environment\"\n      }), \" section disables Elasticsearch's security features.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Kibana service is configured to run Kibana version 8.15.0. It maps port 5601 of the container to port 5601 of the host machine. Kibana is a web interface for Elasticsearch that allows you to visualize and interact with your data.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To start the Elasticsearch and Kibana services, open a terminal window and run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker-compose up\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This command will start the Elasticsearch and Kibana services in the background. Once the services are running, you can access Kibana by navigating to \", _jsx(_components.code, {\n        children: \"http://localhost:5601\"\n      }), \" in your web browser.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Integrating ElasticSearch with a .NET Web API\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Create a new .NET Web API project and install the following NuGet package:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"dotnet add package Elastic.Clients.Elasticsearch\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This package provides the necessary classes to interact with Elasticsearch from .NET.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next, create a new folder named \", _jsx(_components.code, {\n        children: \"Models\"\n      }), \" and add a new class named \", _jsx(_components.code, {\n        children: \"User\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public class User\\n{\\n    [JsonProperty(\\\"Id\\\")]\\n    public int Id { get; set; }\\n\\n    [JsonProperty(\\\"FirstName\\\")]\\n    public string FirstName { get; set; }\\n\\n    [JsonProperty(\\\"LastName\\\")]\\n    public string LastName { get; set; }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then create a new folder named \", _jsx(_components.code, {\n        children: \"Services\"\n      }), \" and add a new interface named \", _jsx(_components.code, {\n        children: \"IElasticService\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public interface IElasticService\\n{\\n    Task CreateIndexIfNotExistsAsync(string indexName);\\n    Task<bool> AddOrUpdate(User user);\\n    Task<bool> AddOrUpdateBulk(IEnumerable<User> users, string indexName);\\n    Task<User> Get(string key);\\n    Task<List<User>> GetAll();\\n    Task<bool> Remove(string key);\\n    Task<long> RemoveAll();\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Add a new class named \", _jsx(_components.code, {\n        children: \"ElasticService\"\n      }), \" to the \", _jsx(_components.code, {\n        children: \"Services\"\n      }), \" folder to implement the \", _jsx(_components.code, {\n        children: \"IElasticService\"\n      }), \" interface:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"public class ElasticService : IElasticService\\n{\\n    private readonly ElasticsearchClient _client;\\n    private readonly ElasticSettings _elasticSettings;\\n\\n    public ElasticService(IOptions<ElasticSettings> options)\\n    {\\n        _elasticSettings = options.Value;\\n        var settings = new ElasticsearchClientSettings(new Uri(_elasticSettings.Url))\\n            .DefaultIndex(_elasticSettings.DefaultIndex);\\n        _client = new ElasticsearchClient(settings);\\n    }\\n\\n    public async Task CreateIndexIfNotExistsAsync(string indexName)\\n    {\\n        if (!_client.Indices.Exists(indexName).Exists)\\n        {\\n            await _client.Indices.CreateAsync(indexName);\\n        }\\n    }\\n\\n    public async Task<bool> AddOrUpdate(User user)\\n    {\\n        var response = await _client.IndexAsync(user, idx => idx\\n            .Index(_elasticSettings.DefaultIndex)\\n            .Id(user.Id)\\n            .Refresh(Refresh.WaitFor));\\n        return response.IsValidResponse;\\n    }\\n\\n    public async Task<bool> AddOrUpdateBulk(IEnumerable<User> users, string indexName)\\n    {\\n        var response = await _client.BulkAsync(b => b\\n            .Index(_elasticSettings.DefaultIndex)\\n            .UpdateMany(users, (ud, u) => ud.Doc(u).DocAsUpsert(true)));\\n        return response.IsValidResponse;\\n    }\\n\\n    public async Task<User> Get(string key)\\n    {\\n        var response = await _client.GetAsync<User>(key,\\n            g => g.Index(_elasticSettings.DefaultIndex));\\n        return response.Source;\\n    }\\n\\n    public async Task<List<User>> GetAll()\\n    {\\n        var response = await _client.SearchAsync<User>(s => s\\n            .Index(_elasticSettings.DefaultIndex));\\n        return response.IsValidResponse ? response.Documents.ToList() : default;\\n    }\\n\\n    public async Task<bool> Remove(string key)\\n    {\\n        var response = await _client.DeleteAsync<User>(key,\\n            d => d.Index(_elasticSettings.DefaultIndex));\\n        return response.IsValidResponse;\\n    }\\n\\n    public async Task<long> RemoveAll()\\n    {\\n        var response = await _client.DeleteByQueryAsync<User>(d => d\\n            .Index(_elasticSettings.DefaultIndex)\\n            .Query(q => q.MatchAll()));\\n        return response.IsValidResponse ? response.Deleted : default;\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Configuring the .NET Web API to Use ElasticSearch\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Open the \", _jsx(_components.code, {\n        children: \"appsettings.json\"\n      }), \" file and add the following section:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"\\\"ElasticSettings\\\": {\\n  \\\"Url\\\": \\\"http://localhost:9200\\\",\\n  \\\"DefaultIndex\\\": \\\"users\\\",\\n  \\\"Username\\\": \\\"\\\",\\n  \\\"Password\\\": \\\"\\\"\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Open the \", _jsx(_components.code, {\n        children: \"Program.cs\"\n      }), \" file and add the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"builder.Services.Configure<ElasticSettings>(builder.Configuration.GetSection(\\\"ElasticSettings\\\"));\\nbuilder.Services.AddSingleton<IElasticService, ElasticService>();\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Creating an ElasticSearch Controller\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a new controller named \", _jsx(_components.code, {\n        children: \"UsersController\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-csharp\",\n        children: \"[ApiController]\\n[Route(\\\"[controller]\\\")]\\npublic class UsersController : ControllerBase\\n{\\n    private readonly ILogger<UsersController> _logger;\\n    private readonly IElasticService _elasticService;\\n\\n    public UsersController(ILogger<UsersController> logger, IElasticService elasticService)\\n    {\\n        _logger = logger;\\n        _elasticService = elasticService;\\n    }\\n\\n    [HttpPost(\\\"create-index\\\")]\\n    public async Task<IActionResult> CreateIndex(string indexName)\\n    {\\n        await _elasticService.CreateIndexIfNotExistsAsync(indexName);\\n        return Ok($\\\"Index {indexName} created or already exists.\\\");\\n    }\\n\\n    [HttpPost(\\\"add-user\\\")]\\n    public async Task<IActionResult> AddUser([FromBody] User user)\\n    {\\n        var result = await _elasticService.AddOrUpdate(user);\\n        return result ? Ok(\\\"User added or updated successfully.\\\") : StatusCode(500, \\\"Error adding or updating user.\\\");\\n    }\\n\\n    [HttpPost(\\\"update-user\\\")]\\n    public async Task<IActionResult> UpdateUser([FromBody] User user)\\n    {\\n        var result = await _elasticService.AddOrUpdate(user);\\n        return result ? Ok(\\\"User updated successfully.\\\") : StatusCode(500, \\\"Error updating user.\\\");\\n    }\\n\\n    [HttpGet(\\\"get-user/{key}\\\")]\\n    public async Task<IActionResult> GetUser(string key)\\n    {\\n        var user = await _elasticService.Get(key);\\n        return user != null ? Ok(user) : NotFound(\\\"User not found.\\\");\\n    }\\n\\n    [HttpGet(\\\"get-all-users\\\")]\\n    public async Task<IActionResult> GetAllUsers()\\n    {\\n        var users = await _elasticService.GetAll();\\n        return users != null ? Ok(users) : StatusCode(500, \\\"Error retrieving users.\\\");\\n    }\\n\\n    [HttpDelete(\\\"delete-user/{key}\\\")]\\n    public async Task<IActionResult> DeleteUser(string key)\\n    {\\n        var result = await _elasticService.Remove(key);\\n        return result ? Ok(\\\"User deleted successfully.\\\") : StatusCode(500, \\\"Error deleting user.\\\");\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We've explored the process of integrating ElasticSearch with a .NET Web API. We learned how to set up ElasticSearch and Kibana locally using Docker Compose, connect to ElasticSearch from the web API, and create simple CRUD operations.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ElasticSearch offers several benefits, such as high-performance search, real-time search, full-text search, faceting, geolocation search, analytics capabilities, ease of use, scalability, reliability, and open-source nature. By leveraging these benefits, developers can build powerful and efficient search and analytics applications.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}2:["$","article",null,{"className":"container mx-auto px-4 py-8 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4","children":[["$","span",null,{"children":"2024-08-25"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["5"," min read"]}]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"Integrating ElasticSearch with .NET Web API"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-6","children":"This guide will walk you through setting up ElasticSearch locally using Docker Compose, connecting to ElasticSearch from your .NET Web API, and creating simple CRUD operations."}],["$","div",null,{"className":"aspect-video relative overflow-hidden rounded-lg mb-8","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/integrating_elastic_search_with_dotnet_web_api.jpg?updatedAt=1746813301359","alt":"Integrating ElasticSearch with .NET Web API","className":"object-cover w-full h-full"}]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-8","children":[["$","$L7","Elasticsearch",{"href":"/tags/Elasticsearch","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Elasticsearch"]}],["$","$L7","Search",{"href":"/tags/Search","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Search"]}],["$","$L7","Analytics",{"href":"/tags/Analytics","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Analytics"]}],["$","$L7","Crud",{"href":"/tags/Crud","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Crud"]}]]}]]}],["$","$Lc",null,{"content":"$d"}],["$","div",null,{"className":"mt-12 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Share this post"}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"https://twitter.com/intent/tweet?text=Integrating%20ElasticSearch%20with%20.NET%20Web%20API&url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fintegrating_elastic_search_with_dotnet_web_api","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center","children":"Twitter"}],["$","a",null,{"href":"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fintegrating_elastic_search_with_dotnet_web_api","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded flex items-center","children":"Facebook"}],["$","a",null,{"href":"https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fintegrating_elastic_search_with_dotnet_web_api","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center","children":"LinkedIn"}]]}]]}],["$","div",null,{"className":"mt-16 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Related Articles"}],["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-6","children":[["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/soft_delete_with_entity_framework_core.jpg?updatedAt=1746813294522","alt":"Implementing Soft Delete in .NET with Entity Framework Core","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Oct 2, 2024"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["5"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/how-to-implement-soft-delete-with-entity-framwork-core","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Implementing Soft Delete in .NET with Entity Framework Core"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Learn how to implement soft delete functionality in your .NET applications using Entity Framework Core, improving data management and recoverability."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}],["$","$L7","Efcore",{"href":"/tags/Efcore","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Efcore"]}],["$","$L7","Softdelete",{"href":"/tags/Softdelete","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Softdelete"]}],["$","$L7","Database",{"href":"/tags/Database","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Database"]}],["$","$L7","Crud",{"href":"/tags/Crud","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Crud"]}]]}]]}]]}],["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/long-time-running-tasks.png?updatedAt=1746822507906","alt":"Implementing Long-Running Background Tasks in ASP.NET Core","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Oct 26, 2024"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["4"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/implementing-long-running-background-tasks-in-aspnet-core","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Implementing Long-Running Background Tasks in ASP.NET Core"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Learn how to implement long-running background tasks in ASP.NET Core using hosted services and background workers."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Aspnetcore",{"href":"/tags/Aspnetcore","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Aspnetcore"]}],["$","$L7","Background Tasks",{"href":"/tags/Background Tasks","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Background Tasks"]}],["$","$L7","Hosted Services",{"href":"/tags/Hosted Services","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Hosted Services"]}],["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}]]}]]}]]}]]}]]}]]}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Integrating ElasticSearch with .NET Web API | .NET Evangelist"}],["$","meta","3",{"name":"description","content":"This guide will walk you through setting up ElasticSearch locally using Docker Compose, connecting to ElasticSearch from your .NET Web API, and creating simple CRUD operations."}],["$","meta","4",{"property":"og:title","content":"Integrating ElasticSearch with .NET Web API"}],["$","meta","5",{"property":"og:description","content":"This guide will walk you through setting up ElasticSearch locally using Docker Compose, connecting to ElasticSearch from your .NET Web API, and creating simple CRUD operations."}],["$","meta","6",{"property":"og:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/integrating_elastic_search_with_dotnet_web_api.jpg?updatedAt=1746813301359"}],["$","meta","7",{"property":"og:type","content":"article"}],["$","meta","8",{"property":"article:published_time","content":"2024-08-25"}],["$","meta","9",{"property":"article:author","content":"Your Name"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"Integrating ElasticSearch with .NET Web API"}],["$","meta","12",{"name":"twitter:description","content":"This guide will walk you through setting up ElasticSearch locally using Docker Compose, connecting to ElasticSearch from your .NET Web API, and creating simple CRUD operations."}],["$","meta","13",{"name":"twitter:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/integrating_elastic_search_with_dotnet_web_api.jpg?updatedAt=1746813301359"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","15",{"name":"next-size-adjust"}]]
1:null
