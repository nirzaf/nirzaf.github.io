3:I[8369,[],""]
5:I[7206,[],""]
6:I[6124,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeProvider"]
7:I[1893,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],""]
8:I[6159,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","1931","static/chunks/app/page-88df9313d37b14f9.js"],"HeaderSearch"]
9:I[5727,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"MobileMenu"]
a:I[94,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","3185","static/chunks/app/layout-10e948e6073f84a8.js"],"ThemeToggle"]
4:["slug","mastering-common-table-expressions-ctes-in-postgresql-recursive-queries-performance-tips","d"]
0:["GpO592H_LkmWyA7BodWZx",[[["",{"children":["blog",{"children":[["slug","mastering-common-table-expressions-ctes-in-postgresql-recursive-queries-performance-tips","d"],{"children":["__PAGE__?{\"slug\":\"mastering-common-table-expressions-ctes-in-postgresql-recursive-queries-performance-tips\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","mastering-common-table-expressions-ctes-in-postgresql-recursive-queries-performance-tips","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0b32324c4996f85d.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_d65c78 __variable_5899e0 antialiased min-h-screen flex flex-col","children":["$","$L6",null,{"children":[["$","header",null,{"className":"bg-white dark:bg-gray-900 shadow-md","children":["$","div",null,{"className":"container mx-auto px-4 py-3 flex justify-between items-center","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-12 w-16 md:h-14 md:w-20","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-xl md:text-2xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","div",null,{"className":"flex-1 mx-6 max-w-md hidden md:block","children":["$","$L8",null,{}]}],["$","div",null,{"className":"flex items-center space-x-6","children":[["$","nav",null,{"className":"hidden md:block","children":["$","ul",null,{"className":"flex space-x-8","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Home",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["Blogs",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-800 dark:text-gray-200 font-medium hover:text-blue-600 dark:hover:text-blue-400 py-2 transition-colors relative group","children":["About",["$","span",null,{"className":"absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 group-hover:w-full transition-all duration-300"}]]}]}]]}]}],["$","$L9",null,{}],["$","$La",null,{}]]}]]}]}],["$","main",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"container mx-auto px-4 py-16 text-center","children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"404 - Page Not Found"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-8","children":"The page you are looking for does not exist."}],["$","div",null,{"className":"flex justify-center","children":["$","$L7",null,{"href":"/","className":"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded","data-cy":"home-link","children":"Return Home"}]}]]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"bg-white dark:bg-gray-900 py-8 mt-12 border-t border-gray-200 dark:border-gray-800","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center","children":[["$","div",null,{"className":"mb-6 md:mb-0","children":[["$","$L7",null,{"href":"/","className":"flex items-center hover:opacity-90 transition-opacity mb-4","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"relative h-10 w-14 md:h-12 md:w-16","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/dotnetlogo.png?updatedAt=1746982028912","alt":".NET Logo","className":"object-contain h-full w-full"}]}],["$","span",null,{"className":"text-lg md:text-xl font-bold bg-gradient-to-r from-blue-500 to-cyan-400 text-transparent bg-clip-text ml-1","children":"Evangelist"}]]}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mt-2","children":"Â© 2025 .NET Evangelist. All rights reserved."}]]}],["$","div",null,{"className":"grid grid-cols-2 gap-x-8 gap-y-4","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Navigation"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Home"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/blog","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"Blogs"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"/about","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium","children":"About"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-800 dark:text-white uppercase tracking-wider mb-3","children":"Connect"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"}]}],"Twitter"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}],"GitHub"]}]}],["$","li",null,{"children":["$","a",null,{"href":"#","className":"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center font-medium","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-4 w-4 mr-2","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z"}]}],"LinkedIn"]}]}]]}]]}]]}]]}]}]}]]}]}]}]],null],null],["$Lb",null]]]]
c:I[2364,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"BlogContent"]
e:I[231,["1893","static/chunks/1893-82c44e1e1ff4f13a.js","231","static/chunks/231-b72d69e4329a1be1.js","308","static/chunks/app/blog/%5Bslug%5D/page-d7c48434154c3f65.js"],"Image"]
d:T4797,{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    h4: \"h4\",\n    hr: \"hr\",\n    a: \"a\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Common Table Expressions (CTEs) are one of the most powerful tools in PostgreSQL for writing clean, maintainable, and advanced SQL queries. Whether youâre working with simple data transformations or tackling complex hierarchical data, CTEs can help you break down problems, improve readability, and unlock advanced capabilities like recursion. In this in-depth article, we'll explore the syntax, practical use cases, recursive queries, performance implications, and best practices for CTEs in PostgreSQL.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"What is a CTE?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.strong, {\n        children: \"Common Table Expression\"\n      }), \" (CTE) is a temporary result set that you can reference within a single SQL statement. CTEs are defined using the \", _jsx(_components.code, {\n        children: \"WITH\"\n      }), \" clause and provide a way to organize your queries into logical building blocks, making them easier to read, debug, and maintain.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic CTE Syntax\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sql\",\n        children: \"WITH cte_name AS (\\n  SELECT ...\\n)\\nSELECT * FROM cte_name;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can define multiple CTEs by separating them with commas:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sql\",\n        children: \"WITH cte1 AS (...),\\n     cte2 AS (...)\\nSELECT ... FROM cte1 JOIN cte2 ON ...;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Why Use CTEs?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"CTEs offer several key advantages for SQL developers:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Readability:\"\n        }), \" Break down complex logic into manageable steps.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Reusability:\"\n        }), \" Reference the same CTE multiple times in a query.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Recursion:\"\n        }), \" Solve hierarchical or graph problems elegantly.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Maintainability:\"\n        }), \" Isolate subqueries for easier debugging and refactoring.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Modularity:\"\n        }), \" Compose queries in a modular, stepwise fashion.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"When to Use CTEs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use CTEs when:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"You need to reuse a subquery multiple times.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"You want to improve the clarity of deeply nested queries.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"You are working with hierarchical data (e.g., organization charts, category trees).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"You need to perform recursive operations (e.g., traversing parent-child relationships).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Practical Example: Simplifying a Complex Query\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Suppose you want to find employees in each department whose salaries are above their departmentâs average. Without CTEs, this can become a deeply nested subquery. With CTEs, the logic is much clearer:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sql\",\n        children: \"WITH dept_avg AS (\\n  SELECT department_id, AVG(salary) AS avg_salary\\n  FROM employees\\n  GROUP BY department_id\\n)\\nSELECT e.employee_id, e.name, e.salary, e.department_id\\nFROM employees e\\nJOIN dept_avg d ON e.department_id = d.department_id\\nWHERE e.salary > d.avg_salary;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This approach makes your SQL more readable and easier to maintain, especially as business logic grows.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Recursive CTEs: Unlocking Hierarchical and Graph Data\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the most compelling features of CTEs in PostgreSQL is recursion. Recursive CTEs allow you to traverse hierarchical data structures, such as organization charts, folder trees, or bill-of-materials relationships, directly in SQL.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Recursive CTE Syntax\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A recursive CTE consists of two parts:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Anchor member:\"\n        }), \" The base case of the recursion (e.g., top-level managers).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Recursive member:\"\n        }), \" A query that references the CTE itself, building upon the anchor set.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sql\",\n        children: \"WITH RECURSIVE cte_name AS (\\n  -- Anchor member\\n  SELECT ...\\n  UNION ALL\\n  -- Recursive member\\n  SELECT ... FROM cte_name JOIN ...\\n)\\nSELECT * FROM cte_name;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example: Organizational Hierarchy\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Suppose you have an \", _jsx(_components.code, {\n        children: \"employees\"\n      }), \" table with \", _jsx(_components.code, {\n        children: \"employee_id\"\n      }), \", \", _jsx(_components.code, {\n        children: \"manager_id\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" columns. To build an org chart:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sql\",\n        children: \"WITH RECURSIVE org_chart AS (\\n  SELECT employee_id, manager_id, name, 1 AS level\\n  FROM employees\\n  WHERE manager_id IS NULL\\n  UNION ALL\\n  SELECT e.employee_id, e.manager_id, e.name, oc.level + 1\\n  FROM employees e\\n  INNER JOIN org_chart oc ON e.manager_id = oc.employee_id\\n)\\nSELECT * FROM org_chart ORDER BY level, employee_id;\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This query starts with top-level managers and recursively finds all subordinates, assigning each a \", _jsx(_components.code, {\n        children: \"level\"\n      }), \" in the hierarchy.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Real-World Recursive Use Cases\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Category trees:\"\n        }), \" E-commerce product categories with parent-child relationships.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"File systems:\"\n        }), \" Navigating folder structures.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Graph traversal:\"\n        }), \" Finding all paths or cycles in a network.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Bill of materials:\"\n        }), \" Expanding product components in manufacturing.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Performance Tips for CTEs in PostgreSQL\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While CTEs are powerful, they can also introduce performance pitfalls if not used carefully. Here are some tips to keep your queries efficient:\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"1. Materialization vs. Inlining\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Materialization (Pre-PostgreSQL 12):\"\n        }), \" CTEs are always executed and stored before the main query, which can prevent the optimizer from reordering or merging them for efficiency.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Inlining (PostgreSQL 12+):\"\n        }), \" By default, PostgreSQL may inline CTEs, treating them like subqueries for better performance. You can control this with \", _jsx(_components.code, {\n          children: \"MATERIALIZED\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"NOT MATERIALIZED\"\n        }), \" hints:\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sql\",\n        children: \"WITH cte_name AS MATERIALIZED (\\n  SELECT ...\\n)\\nSELECT * FROM cte_name;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"2. Use Indexes\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ensure that columns used in CTE joins and filters are indexed. Poor indexing can lead to slow query execution, especially with large datasets.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"3. Limit Recursive Depth\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When working with recursive CTEs, always include a depth limit or termination condition to avoid infinite loops and excessive resource usage.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sql\",\n        children: \"WITH RECURSIVE cte AS (\\n  SELECT id, parent_id, 1 AS level FROM items WHERE parent_id IS NULL\\n  UNION ALL\\n  SELECT i.id, i.parent_id, cte.level + 1 FROM items i JOIN cte ON i.parent_id = cte.id WHERE cte.level < 10\\n)\\nSELECT * FROM cte;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"4. Analyze Query Plans\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"EXPLAIN\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"EXPLAIN ANALYZE\"\n      }), \" to inspect how PostgreSQL executes your queries. Look for unnecessary materialization, sequential scans, or other inefficiencies.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"5. Avoid Overusing CTEs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For simple subqueries, a regular subquery or derived table may be faster. Use CTEs for clarity, recursion, or when you need to reference a result multiple times.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Advanced CTE Patterns\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Multiple CTEs in One Query\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can define and chain multiple CTEs for complex data transformations:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sql\",\n        children: \"WITH recent_orders AS (\\n  SELECT * FROM orders WHERE order_date > CURRENT_DATE - INTERVAL '30 days'\\n),\\norder_totals AS (\\n  SELECT customer_id, SUM(total) AS total_spent FROM recent_orders GROUP BY customer_id\\n)\\nSELECT * FROM order_totals WHERE total_spent > 1000;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"CTEs with Window Functions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Combine CTEs with window functions for advanced analytics:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sql\",\n        children: \"WITH ranked_sales AS (\\n  SELECT *, RANK() OVER (PARTITION BY region ORDER BY sales DESC) AS region_rank\\n  FROM sales\\n)\\nSELECT * FROM ranked_sales WHERE region_rank = 1;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Recursive Pathfinding Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Suppose you need to find all ancestors of a given node in a tree:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-sql\",\n        children: \"WITH RECURSIVE ancestors AS (\\n  SELECT id, parent_id FROM nodes WHERE id = 42\\n  UNION ALL\\n  SELECT n.id, n.parent_id FROM nodes n JOIN ancestors a ON n.id = a.parent_id\\n)\\nSELECT * FROM ancestors;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Common Pitfalls and How to Avoid Them\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Performance Issues:\"\n        }), \" Excessive or unnecessary CTEs can slow down queries. Always benchmark and analyze.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Infinite Recursion:\"\n        }), \" Always define a termination condition in recursive CTEs to prevent runaway queries.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Readability:\"\n        }), \" Too many nested or chained CTEs can make queries harder to follow. Use descriptive names and comments.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Materialization Surprises:\"\n        }), \" Be aware of PostgreSQLâs version-dependent behavior regarding CTE materialization and inlining.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Best Practices for CTEs\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Use CTEs for clarity, modularity, and recursion, not as a default for every subquery.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Name your CTEs descriptively to make queries self-documenting.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Test with realistic data volumes to ensure performance scales.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Combine CTEs with window functions, aggregates, and joins for powerful analytics.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Document complex CTE logic with comments for maintainability.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Common Table Expressions are a cornerstone of advanced SQL in PostgreSQL. By mastering CTEs, youâll write cleaner, more maintainable, and more powerful queriesâespecially when dealing with complex business logic or hierarchical data. Remember to analyze performance, use recursion wisely, and always test your queries for correctness and efficiency.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Further Reading and Resources\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.postgresql.org/docs/current/queries-with.html\",\n          children: \"PostgreSQL CTE Documentation\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.postgresql.org/docs/current/queries-with.html#QUERIES-WITH-RECURSIVE\",\n          children: \"Recursive Queries in PostgreSQL\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.postgresql.org/docs/current/using-explain.html\",\n          children: \"EXPLAIN Command\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://modern-sql.com/use-case/recursive-queries\",\n          children: \"Recursive SQL Patterns\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Ready to take your PostgreSQL skills to the next level? Start experimenting with CTEs in your own queries and unlock new possibilities for data analysis and application logic!\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}2:["$","article",null,{"className":"container mx-auto px-4 py-8 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4","children":[["$","span",null,{"children":"2025-05-11"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["7"," min read"]}]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"Mastering Common Table Expressions (CTEs) in PostgreSQL: Recursive Queries and Performance Tips"}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 mb-6","children":"A comprehensive guide to Common Table Expressions (CTEs) in PostgreSQL, including recursive queries, practical use cases, and performance optimization tips for writing efficient, maintainable SQL."}],["$","div",null,{"className":"aspect-video relative overflow-hidden rounded-lg mb-8","children":["$","img",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/mastering-common-table-expressions.png?updatedAt=1746993563622","alt":"Mastering Common Table Expressions (CTEs) in PostgreSQL: Recursive Queries and Performance Tips","className":"object-cover w-full h-full"}]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-8","children":[["$","$L7","Postgresql",{"href":"/tags/Postgresql","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Postgresql"]}],["$","$L7","Sql",{"href":"/tags/Sql","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Sql"]}],["$","$L7","Cte",{"href":"/tags/Cte","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Cte"]}],["$","$L7","Database",{"href":"/tags/Database","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Database"]}],["$","$L7","Performance",{"href":"/tags/Performance","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Performance"]}],["$","$L7","Recursion",{"href":"/tags/Recursion","className":"text-sm bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Recursion"]}]]}]]}],["$","$Lc",null,{"content":"$d"}],["$","div",null,{"className":"mt-12 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Share this post"}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"https://twitter.com/intent/tweet?text=Mastering%20Common%20Table%20Expressions%20(CTEs)%20in%20PostgreSQL%3A%20Recursive%20Queries%20and%20Performance%20Tips&url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fmastering-common-table-expressions-ctes-in-postgresql-recursive-queries-performance-tips","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center","children":"Twitter"}],["$","a",null,{"href":"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fmastering-common-table-expressions-ctes-in-postgresql-recursive-queries-performance-tips","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded flex items-center","children":"Facebook"}],["$","a",null,{"href":"https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fdotnetevangelist.com%2Fblog%2Fmastering-common-table-expressions-ctes-in-postgresql-recursive-queries-performance-tips","target":"_blank","rel":"noopener noreferrer","className":"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center","children":"LinkedIn"}]]}]]}],["$","div",null,{"className":"mt-16 pt-8 border-t border-gray-200 dark:border-gray-800","children":[["$","h2",null,{"className":"text-2xl font-bold mb-4","children":"Related Articles"}],["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-6","children":[["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/blazor-modern-ui-2025.png?updatedAt=1746813295064","alt":"Modern Web UIs with Blazor in 2025: State Management & Component Libraries","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Apr 6, 2025"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["21"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/building-modern-web-ui-with-blazor-in-2025","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Modern Web UIs with Blazor in 2025: State Management & Component Libraries"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Explore the latest advancements in Blazor development for 2025, focusing on state management, popular component libraries like MudBlazor and Radzen, and key performance optimization techniques."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Blazor",{"href":"/tags/Blazor","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Blazor"]}],["$","$L7",".Net",{"href":"/tags/.Net","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#",".Net"]}],["$","$L7","Web Development",{"href":"/tags/Web Development","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Web Development"]}],["$","$L7","Ui",{"href":"/tags/Ui","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Ui"]}],["$","$L7","State Management",{"href":"/tags/State Management","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","State Management"]}],["$","$L7","Mudblazor",{"href":"/tags/Mudblazor","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Mudblazor"]}],["$","$L7","Radzen",{"href":"/tags/Radzen","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Radzen"]}],["$","$L7","Performance",{"href":"/tags/Performance","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Performance"]}],["$","$L7","Asp.net Core",{"href":"/tags/Asp.net Core","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Asp.net Core"]}]]}]]}]]}],["$","div",null,{"className":"border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow","children":[["$","div",null,{"className":"aspect-video relative overflow-hidden","children":["$","$Le",null,{"src":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/mastering-advanced-features-in-net.png?updatedAt=1746984226226","alt":"Beyond the Basics: Mastering Advanced Features in .NET","fill":true,"sizes":"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw","className":"object-cover","priority":false}]}],["$","div",null,{"className":"p-4","children":[["$","div",null,{"className":"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2","children":[["$","span",null,{"children":"Jan 11, 2025"}],["$","span",null,{"className":"mx-2","children":"â¢"}],["$","span",null,{"children":["4"," min read"]}]]}],["$","h2",null,{"className":"text-xl font-semibold mb-2","children":["$","$L7",null,{"href":"/blog/beyond-the-basics-mastering-advanced-features-in-dotnet","className":"hover:text-blue-600 dark:hover:text-blue-400","children":"Beyond the Basics: Mastering Advanced Features in .NET"}]}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300 mb-4 line-clamp-3","children":"Explore advanced .NET features such as reflection, dependency injection, asynchronous programming, and performance optimization to elevate your development skills."}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L7","Dotnet",{"href":"/tags/Dotnet","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dotnet"]}],["$","$L7","Advanced",{"href":"/tags/Advanced","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Advanced"]}],["$","$L7","Reflection",{"href":"/tags/Reflection","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Reflection"]}],["$","$L7","Dependency Injection",{"href":"/tags/Dependency Injection","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Dependency Injection"]}],["$","$L7","Async",{"href":"/tags/Async","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Async"]}],["$","$L7","Performance",{"href":"/tags/Performance","className":"text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700","children":["#","Performance"]}]]}]]}]]}]]}]]}]]}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Mastering Common Table Expressions (CTEs) in PostgreSQL: Recursive Queries and Performance Tips | .NET Evangelist"}],["$","meta","3",{"name":"description","content":"A comprehensive guide to Common Table Expressions (CTEs) in PostgreSQL, including recursive queries, practical use cases, and performance optimization tips for writing efficient, maintainable SQL."}],["$","meta","4",{"property":"og:title","content":"Mastering Common Table Expressions (CTEs) in PostgreSQL: Recursive Queries and Performance Tips"}],["$","meta","5",{"property":"og:description","content":"A comprehensive guide to Common Table Expressions (CTEs) in PostgreSQL, including recursive queries, practical use cases, and performance optimization tips for writing efficient, maintainable SQL."}],["$","meta","6",{"property":"og:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/mastering-common-table-expressions.png?updatedAt=1746993563622"}],["$","meta","7",{"property":"og:type","content":"article"}],["$","meta","8",{"property":"article:published_time","content":"2025-05-11"}],["$","meta","9",{"property":"article:author","content":"Your Name"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"Mastering Common Table Expressions (CTEs) in PostgreSQL: Recursive Queries and Performance Tips"}],["$","meta","12",{"name":"twitter:description","content":"A comprehensive guide to Common Table Expressions (CTEs) in PostgreSQL, including recursive queries, practical use cases, and performance optimization tips for writing efficient, maintainable SQL."}],["$","meta","13",{"name":"twitter:image","content":"https://ik.imagekit.io/quadrate/assets/img/dotnetevangelist/mastering-common-table-expressions.png?updatedAt=1746993563622"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","15",{"name":"next-size-adjust"}]]
1:null
